{"version":3,"file":"emulator.js","sources":["../../../apps/based/emulator/emulator.js"],"sourcesContent":["export default class Emulator {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.emulator = null;\n        this.romData = null;\n        // this.gameUrl = '';\n        // this.gameIsRunning = false;\n        this.emulatorWindows = {}; // Track open windows per context\n\n        this.emulatorIcons = {\n            nes: '/desktop/assets/images/icons/icon_nes_64.png',\n            sega: '/desktop/assets/images/icons/icon_sega_64.png',\n            snes: '/desktop/assets/images/icons/icon_snes_64.png',\n            atari2600: '/desktop/assets/images/icons/icon_atari2600_64.png',\n            n64: '/desktop/assets/images/icons/icon_n64_64.png',\n        };\n\n        return this;\n    }\n\n    async open({ context = 'nes' }) {\n\n        if (window.discordView) {\n            this.bp.alert(`Emulators are currently not available in Discord Activities.<br/>Please visit <a target=\"_blank\" href=\"https://buddypond.com/app/basketball\">BuddyPond</a> to use the Emulators.`, {\n                title: 'Sorry!'\n            });\n            return;\n        }\n\n        if (!this.emulatorWindows[context]) {\n            this.emulatorWindows[context] = [];\n        }\n\n        // Find an unused window slot or create a new one\n        const windowIndex = this.emulatorWindows[context].length;\n        const windowId = `emulators-${context}-${windowIndex + 1}`;\n\n        // Prevent duplicates: check if a window with this ID exists and is still open\n        if (this.emulatorWindows[context].some(w => w.id === windowId)) {\n            console.log(`Emulator window already exists: ${windowId}`);\n            return;\n        }\n\n        const emulatorWindow = this.createEmulatorWindow(context, windowId);\n        this.emulatorWindows[context].push({ id: windowId, win: emulatorWindow });\n\n        const content = emulatorWindow.content;\n        const logo = document.createElement('img');\n        logo.id = `emulator-logo-${context}`;\n        logo.src = this.bp.config.host + '/' + (this.emulatorIcons[context] || this.emulatorIcons.nes);\n        logo.style.position = 'absolute';\n        logo.style.top = '50%';\n        logo.style.left = '50%';\n        logo.style.transform = 'translate(-50%, -50%)';\n        logo.style.zIndex = '1000'; // Ensure it floats above the iframe\n        // logo.style.display = 'none'; // Initially hidden until emulator is ready\n        logo.style.opacity = '0.8'; // Optional: slight transparency\n        logo.style.maxWidth = '50%'; // Adjust size as needed\n        logo.style.maxHeight = '50%';\n\n        // on click logo trigger randomGameButton click\n        logo.onclick = () => {\n            if (emulatorWindow.randomGameButton) {\n                emulatorWindow.randomGameButton.click();\n                logo.style.display = 'none'; // Hide after first click\n            } else {\n                console.warn('Random game button not found');\n            }\n        };\n\n        logo.style.cursor = 'pointer'; // Change cursor to pointer for better UX\n        console.log('Adding logo to emulator window:', logo);\n        emulatorWindow.logo = logo; // Store reference to logo for later use\n        // content.parentNode.style.position = 'relative'; // Ensure parent can position the logo\n        content.parentNode.appendChild(emulatorWindow.logo);\n\n        // Load game list based on context\n        const games = await this.bp.load(`${cdnUrl}/${context}.json`);\n        this.setupGameSelector(emulatorWindow, games, context);\n        this.setupSearchInput(emulatorWindow, games, context);\n        this.setupRandomGameButton(emulatorWindow, games, context);\n    }\n\n    createEmulatorWindow(context, windowId) {\n        const emulatorTitles = {\n            nes: 'NES',\n            sega: 'Sega Genesis',\n            n64: 'Nintendo 64',\n            snes: 'Super Nintendo',\n            atari2600: 'Atari 2600'\n        };\n\n        return this.bp.apps.ui.windowManager.createWindow({\n            id: windowId, // Use passed-in ID\n            app: 'emulator', // Use context to differentiate apps\n            title: emulatorTitles[context] || 'Emulator',\n            // label: emulatorTitles[context] || 'Emulator',\n            x: 50,\n            y: 100,\n            width: 600,\n            height: 500,\n            minWidth: 600,\n            minHeight: 500,\n            parent: $('#desktop')[0],\n            iframeContent: '/v5/apps/based/emulator/emulator-js/index.html',\n            icon: this.emulatorIcons[context] || this.emulatorIcons.nes,\n            resizable: true,\n            minimizable: true,\n            maximizable: true,\n            closable: true,\n            focusable: true,\n            maximized: false,\n            minimized: false,\n            onClose: () => {\n                // on close we need to set this.emulatorWindows context to null\n                this.emulatorWindows[context] = this.emulatorWindows[context]\n                    .filter(w => w.id !== windowId);\n            },\n            onMessage: message => {\n                console.log('Emulator Message:', message);\n                if (message.event === 'ready') {\n                    console.log('Emulator is ready');\n                    //this.logo.style.display = 'block'; // Show logo when emulator is ready\n                }\n            },\n            onLoad: win => {\n                if (win.gameUrl) {\n                    win.sendMessage({\n                        event: 'startGame',\n                        message: 'Hello from Emulator',\n                        gameSystem: context, // Dynamically assign game system\n                        gameUrl: win.gameUrl\n                    });\n                    win.gameIsRunning = true;\n                    win.logo.style.display = 'none'; // Show logo when emulator is ready\n\n                }\n            }\n        });\n    }\n\n    setupGameSelector(emulatorWindow, games, context) {\n        const content = emulatorWindow.content;\n        const gameSelector = document.createElement('div');\n        gameSelector.classList.add('menu-bars');\n        gameSelector.innerHTML = '<select id=\"loadROM\">Load ROM</select>';\n        content.parentNode.insertBefore(gameSelector, content);\n\n        games.forEach(game => {\n            if (context === 'sega') {\n                $('#loadROM').append(`<option value=\"${cdnUrl}/${context}/${game}\">${game}</option>`);\n\n            } else {\n                // nes legacy /roms/ subfolder\n                $('#loadROM').append(`<option value=\"${cdnUrl}/${context}/roms/${game}\">${game}</option>`);\n\n            }\n        });\n\n        $(gameSelector).hide();\n        $('#loadROM').on('change', e => {\n            emulatorWindow.sendMessage({\n                event: 'unloadGame',\n                gameSystem: context,\n                gameUrl: e.target.value\n            });\n            emulatorWindow.gameUrl = e.target.value;\n            emulatorWindow.gameIsRunning = false;\n        });\n    }\n\n    setupSearchInput(emulatorWindow, games, context) {\n        const content = emulatorWindow.content;\n        const searchInput = document.createElement('input');\n        searchInput.type = 'text';\n        searchInput.id = 'searchInput';\n        searchInput.placeholder = `Search for a ${context.toUpperCase()} game`;\n        searchInput.style = 'font-size: 2.5em; background-color: black; color: white;';\n        content.parentNode.insertBefore(searchInput, content);\n\n        $(searchInput).autocomplete({\n            source: games,\n            select: (e, ui) => this.handleGameSelection(ui.item.value, emulatorWindow, context)\n        }).data('ui-autocomplete')._renderItem = (ul, item) => {\n            const prettyLabel = item.label.replace(/_/g, ' ').replace(/\\.(nes|zip|smd|bin)/, '');\n            return $(\"<li>\")\n                .attr(\"data-value\", item.value)\n                .append($(\"<div>\").text(prettyLabel))\n                .appendTo(ul);\n        };\n    }\n\n    setupRandomGameButton(emulatorWindow, games, context) {\n        const content = emulatorWindow.content;\n        const randomGameButton = document.createElement('button');\n        randomGameButton.innerHTML = 'Random Game';\n        randomGameButton.classList.add('button');\n        randomGameButton.style.width = '100%';\n        randomGameButton.onclick = () => this.handleRandomGame(games, emulatorWindow, context);\n\n        emulatorWindow.randomGameButton = randomGameButton; // Store reference for later use\n\n        content.parentNode.insertBefore(randomGameButton, content);\n    }\n\n    handleGameSelection(gameName, emulatorWindow, context) {\n        let gameUrl = `${cdnUrl}/${context}/roms/${gameName}`;\n        if (context === 'sega') {\n            gameUrl = `${cdnUrl}/${context}/${gameName}`;\n        }\n        emulatorWindow.gameUrl = gameUrl;\n        emulatorWindow.gameIsRunning = false;\n\n        emulatorWindow.sendMessage({\n            event: 'unloadGame',\n            gameSystem: context,\n            gameUrl: gameUrl\n        });\n        // emulatorWindow.randomGameButton.style.display = 'none'; // Hide random game button when a game is selected\n        emulatorWindow.logo.style.display = 'block'; // Show logo while loading game\n        setTimeout(() => {\n            emulatorWindow.sendMessage({\n                event: 'startGame',\n                message: 'Hello from Emulator',\n                gameSystem: context,\n                gameUrl: emulatorWindow.gameUrl\n            });\n            emulatorWindow.gameIsRunning = true;\n\n        }, 200);\n\n        // this.logo.style.display = 'none'; // Show logo when emulator is ready\n\n    }\n\n    handleRandomGame(games, emulatorWindow, context) {\n        const randomGame = games[Math.floor(Math.random() * games.length)];\n        emulatorWindow.logo.style.display = 'none'; // Show logo while loading game\n        this.handleGameSelection(randomGame, emulatorWindow, context);\n    }\n\n    async loadROM(url) {\n        try {\n            const response = await fetch(url);\n            this.romData = new Uint8Array(await response.arrayBuffer());\n            this.bp.log('ROM loaded successfully');\n        } catch (error) {\n            this.bp.log('Error loading ROM:', error);\n        }\n    }\n\n    startEmulator() {\n        if (this.romData) {\n            this.emulator.loadROM(this.romData);\n            this.emulator.start();\n            this.bp.log('Emulator started');\n        } else {\n            this.bp.log('No ROM loaded');\n        }\n    }\n\n    stopEmulator() {\n        if (this.emulator) {\n            this.emulator.stop();\n            this.bp.log('Emulator stopped');\n        }\n    }\n}\n\nlet cdnBase64 = 'aHR0cDovL2tyYW1lcmljYS1pbmR1c3RyaWVzLmItY2RuLm5ldA==';\ncdnBase64 = 'aHR0cHM6Ly9rcmFtZXJpY2EtaW5kdXN0cmllcy5iLWNkbi5uZXQ=';\nconst cdnUrl = atob(cdnBase64);\n"],"names":["Emulator","constructor","bp","options","this","emulator","romData","emulatorWindows","emulatorIcons","nes","sega","snes","atari2600","n64","open","context","window","discordView","alert","title","windowId","length","some","w","id","console","log","emulatorWindow","createEmulatorWindow","push","win","content","logo","document","createElement","src","config","host","style","position","top","left","transform","zIndex","opacity","maxWidth","maxHeight","onclick","randomGameButton","click","display","warn","cursor","parentNode","appendChild","games","load","cdnUrl","setupGameSelector","setupSearchInput","setupRandomGameButton","apps","ui","windowManager","createWindow","app","x","y","width","height","minWidth","minHeight","parent","$","iframeContent","icon","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","filter","onMessage","message","event","onLoad","gameUrl","sendMessage","gameSystem","gameIsRunning","gameSelector","classList","add","innerHTML","insertBefore","forEach","game","append","hide","on","e","target","value","searchInput","type","placeholder","toUpperCase","autocomplete","source","select","handleGameSelection","item","data","_renderItem","ul","prettyLabel","label","replace","attr","text","appendTo","handleRandomGame","gameName","setTimeout","randomGame","Math","floor","random","loadROM","url","response","fetch","Uint8Array","arrayBuffer","error","startEmulator","start","stopEmulator","stop","cdnBase64","atob"],"mappings":"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"}