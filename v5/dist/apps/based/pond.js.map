{"version":3,"file":"pond.js","sources":["../../../apps/based/pond/client.js","../../../apps/based/pond/pond.js"],"sourcesContent":["export default class HotPondsWebSocketClient {\n  constructor({ pondId, endpoint, bp }) {\n    this.pondId = pondId;\n    this.endpoint = buddypond.pondsWsEndpoint;\n    this.bp = bp;\n\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.maxBackoffDelay = 10000; // 10 seconds\n    this.isIntentionallyClosed = false;\n    return this;\n  }\n\n  async connect() {\n\n    if (this.ws && (this.ws.readyState === WebSocket.CONNECTING || this.ws.readyState === WebSocket.OPEN)) {\n      return this;\n    }\n\n    const url = `${this.endpoint}?me=${buddypond.me}&qtokenid=${buddypond.qtokenid}`;\n    console.log(`üîå Connecting to HotPonds...`);\n\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(url);\n\n      const onOpen = () => {\n        console.log('‚úÖ WebSocket connected to HotPond');\n        this.reconnectAttempts = 0;\n        this.ws = ws;\n\n        this.pingInterval = setInterval(() => {\n          if (this.ws.readyState === WebSocket.OPEN) {\n            // console.log('Sending ping to hotponds WebSocket');\n            this.ws.send('ping'); // Matches server's setWebSocketAutoResponse(\"ping\", \"pong\")\n          }\n        }, 30000);\n\n        this.bp?.emit('hotpond::connected', { pondId: this.pondId });\n        resolve(this);\n      };\n\n      const onMessage = (event) => {\n        let data;\n        if (event.data === 'pong') {\n          // Ignore pong messages\n          return;\n        }\n        try {\n          data = JSON.parse(event.data);\n        } catch (err) {\n          console.error('‚ùå Failed to parse message:', event.data);\n          this.bp?.emit('hotpond::error', { error: 'Invalid JSON', raw: event.data });\n          return;\n        }\n\n        // üîß Add support for custom actions later\n        console.log('üì¨ Message received from HotPond:', data);\n\n        let action = data.action;\n\n        switch (action) {\n          case 'activePonds':\n            // console.log('Active ponds:', data.ponds);\n            this.bp?.emit('hotpond::activePonds', data.ponds);\n            break;\n        }\n\n        // this.bp?.emit('hotpond::message', { pondId: this.pondId, message: data });\n      };\n\n      const onClose = (event) => {\n        console.warn(`‚ö†Ô∏è WebSocket closed [${event.code}]: ${event.reason}`);\n        clearInterval(this.pingInterval);\n        this._teardown?.();\n        this.ws = null;\n        this.bp?.emit('hotpond::disconnected', {\n          pondId: this.pondId,\n          code: event.code,\n          reason: event.reason,\n        });\n\n        if (!this.isIntentionallyClosed && this.reconnectAttempts < this.maxReconnectAttempts) {\n          const delay = Math.min(\n            200 * Math.pow(2, this.reconnectAttempts) * (1 + 0.1 * Math.random()),\n            this.maxBackoffDelay\n          );\n          console.log(`‚è≥ Reconnecting in ${Math.floor(delay)}ms...`);\n          setTimeout(() => {\n            this.reconnectAttempts++;\n            this.connect().catch(() => { });\n            this.bp?.emit('hotpond::reconnecting', { attempt: this.reconnectAttempts });\n          }, delay);\n        } else {\n          if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            console.error('‚ùå Max reconnect attempts reached. Giving up.');\n            this.bp?.emit('hotpond::reconnect_failed', { pondId: this.pondId });\n          }\n        }\n      };\n\n      const onError = (event) => {\n        console.error('‚ùå WebSocket error:', event);\n        this.bp?.emit('hotpond::error', { error: 'WebSocket error', event });\n        ws.close(1000, 'Error occurred');\n        reject(new Error('WebSocket connection failed'));\n      };\n\n      // Attach handlers\n      ws.addEventListener('open', onOpen);\n      ws.addEventListener('message', onMessage);\n      ws.addEventListener('close', onClose);\n      ws.addEventListener('error', onError);\n\n      // Store methods for teardown\n      this._teardown = () => {\n        ws.removeEventListener('open', onOpen);\n        ws.removeEventListener('message', onMessage);\n        ws.removeEventListener('close', onClose);\n        ws.removeEventListener('error', onError);\n      };\n    });\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.isIntentionallyClosed = true;\n\n      clearInterval(this.pingInterval);\n      this._teardown?.();\n\n      this.ws.close(1000, 'Normal closure');\n      this.ws = null;\n\n      this.bp?.emit('hotpond::closed', { pondId: this.pondId });\n    }\n  }\n\n  send(data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const msg = typeof data === 'string' ? data : JSON.stringify(data);\n      this.ws.send(msg);\n    } else {\n      console.warn('‚ö†Ô∏è Tried to send message but WebSocket is not open');\n    }\n  }\n\n  listActivePonds() {\n\n    // sends a listActivePonds action message to the server\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.send({ action: 'listActivePonds' });\n    } else {\n      console.warn('‚ö†Ô∏è Tried to list active ponds but WebSocket is not open');\n    }\n  }\n\n  clearAllPonds() {\n    // sends a clearAllPonds action message to the server\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.send({ action: 'clearAllPonds' });\n    } else {\n      console.warn('‚ö†Ô∏è Tried to clear all ponds but WebSocket is not open');\n    }\n  }\n\n}\n","import HotPondsWebSocketClient from './client.js';\n\nexport default class Pond {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n        this.options.window = this.options.window || {};\n        this.data = {};\n        this.pondWindow = null;\n    }\n\n    async init() {\n        await this.bp.load('/v5/apps/based/pond/pond.css');\n        this.html = await this.bp.load('/v5/apps/based/pond/pond.html');\n\n        // this may need to be bound to pond::open event...\n        this.bp.on('auth::qtoken', 'ponds-connect-client', async (data) => {\n            if (this.pondWindow && this.pondWindow.content) {\n                $('.loggedIn', this.pondWindow.content).show();\n                $('.loggedOut', this.pondWindow.content).hide();\n            }\n            this.connectPonds(this);\n        });\n\n        if (this.bp.qtokenid) {\n            this.connectPonds(this);\n        }\n\n        return 'loaded pond';\n    }\n\n    async connectPonds() {\n\n        if (!this.client) {\n          this.client = new HotPondsWebSocketClient({ bp: this.bp });\n          console.log('Connecting to HotPonds WebSocket...');\n          await this.client.connect();\n        }\n\n        if (this.eventsBound !== true) {\n            this.bp.on('hotpond::activePonds', 'update-pond-room-list', (data) => {\n                // console.log('Received hotpond::activePonds event with data:', data);\n                this.data.hotPonds = data;\n\n                const chatWindow = this.bp.apps.ui.windowManager.getWindow('pond-chat');\n                if (!chatWindow) {\n                    console.log('Pond message main window not found, cannot update room list');\n                } else {\n                    this.bp.apps.buddylist.populateRoomList(data, chatWindow);\n                }\n                if (this.pondWindow?.content) {\n                    this.updateHotPonds(data);\n                }\n            });\n\n            this.bp.on('pond::connectedUsers', 'update-pond-connected-users', (data) => {\n                // console.log('Received pond::connectedUsers event with data:', data);\n                this.bp.apps.buddylist.updatePondConnectedUsers(data);\n            });\n            this.eventsBound = true;\n        }\n\n\n        this.client.listActivePonds();\n\n    }\n\n\n    updateHotPonds(data) {\n        const $joinPondTable = $('.joinPondTable');\n        $joinPondTable.empty();\n\n        data.sort((a, b) => b.connection_count - a.connection_count);\n\n        for (let pond of data) {\n            const pondName = pond.pond_id.replace('pond/', '');\n            const $existingRow = $joinPondTable.find(`tr[data-pond=\"${pond.pond_id}\"]`);\n\n            if ($existingRow.length > 0) {\n                $existingRow.find('td').eq(1).text(pond.connection_count);\n            } else {\n                $joinPondTable.append(`\n                    <tr data-pond=\"${pond.pond_id}\">\n                        <td>#${pondName}</td>\n                        <td>${pond.connection_count}</td>\n                        <td><button class=\"joinPondButton\" data-context=\"${pondName}\">Join</button></td>\n                    </tr>\n                `);\n            }\n        }\n    }\n\n    async joinPondByName(pondName) {\n        if (!pondName) return;\n\n        // ensure the buddylist app is loaded\n        if (!this.bp.apps.buddylist) {\n            await this.bp.load('buddylist');\n        }\n\n        let invalidName = this.bp.apps.buddylist.forbiddenNotes.containsBadWord(pondName);\n        if (invalidName) {\n            alert('Invalid pond name. Please choose a different name.');\n            return;\n        }\n\n        const pondMainWindow = this.bp.apps.ui.windowManager.getWindow('pond-chat');\n        if (pondMainWindow) {\n            this.bp.apps.buddylist.joinPond(pondName);\n            pondMainWindow.focus();\n        } else {\n            this.bp.apps.buddylist.openChatWindow({ pondname: pondName });\n        }\n    }\n\n    open(options = {}) {\n        const iconImagePath = 'desktop/assets/images/icons/icon_pond_64.png';\n\n        if (!this.pondWindow) {\n            this.pondWindow = this.bp.apps.ui.windowManager.createWindow({\n                id: 'pond',\n                title: 'Ponds',\n                app: 'pond',\n                icon: iconImagePath,\n                x: 100,\n                y: 100,\n                width: 400,\n                height: 470,\n                minWidth: 200,\n                minHeight: 200,\n                parent: $('#desktop')[0],\n                content: this.html,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false,\n                preventOverlap: this.options.window.preventOverlap,\n                onClose: () => {\n                    console.log('pond window closed');\n                    this.pondWindow = null;\n                    clearInterval(this.updatePondsTimer);\n                    // close the client connection if open\n                    if (this.client) {\n                        this.client.disconnect();\n                        this.client = null;\n                    }\n                }\n            });\n\n            if (this.bp.qtokenid) {\n                $('.loggedIn', this.pondWindow.content).show();\n                $('.loggedOut', this.pondWindow.content).hide();\n\n            } else {\n                $('.loggedIn', this.pondWindow.content).hide();\n                $('.loggedOut', this.pondWindow.content).show();\n            }\n\n\n            // Manual pond join via input\n            const $form = $('.joinCustomPondForm', this.pondWindow.content);\n            const $input = $('#customPondName', this.pondWindow.content);\n\n            $form.on('submit', (e) => {\n                e.preventDefault();\n                const pondName = $input.val();\n                this.joinPondByName(pondName);\n            });\n\n            // Table-based join buttons\n            const $joinPondTable = $('.joinPondTable', this.pondWindow.content);\n            $joinPondTable.on('click', '.joinPondButton', (e) => {\n                e.preventDefault();\n                const pondName = $(e.currentTarget).data('context');\n                this.joinPondByName(pondName);\n            });\n\n            // Legacy \"Join Pond\" button (if needed)\n            $('.joinPond', this.pondWindow.content).on('click', (e) => {\n                e.preventDefault();\n                const pondName = $input.val();\n                this.joinPondByName(pondName);\n            });\n        }\n        if (this.client) { // only call if client is initialized / connected\n            this.client.listActivePonds();\n        }\n\n        if (!this.client && this.bp.qtokenid) {\n            this.connectPonds(this);\n        }\n\n        return this.pondWindow;\n    }\n}"],"names":["HotPondsWebSocketClient","constructor","pondId","endpoint","bp","this","buddypond","pondsWsEndpoint","ws","reconnectAttempts","maxReconnectAttempts","maxBackoffDelay","isIntentionallyClosed","connect","readyState","WebSocket","CONNECTING","OPEN","url","me","qtokenid","console","log","Promise","resolve","reject","onOpen","pingInterval","setInterval","send","emit","onMessage","event","data","JSON","parse","err","error","raw","action","ponds","onClose","warn","code","reason","clearInterval","_teardown","delay","Math","min","pow","random","floor","setTimeout","catch","attempt","onError","close","Error","addEventListener","removeEventListener","disconnect","msg","stringify","listActivePonds","clearAllPonds","Pond","options","window","pondWindow","init","load","html","on","async","content","$","show","hide","connectPonds","client","eventsBound","hotPonds","chatWindow","apps","ui","windowManager","getWindow","buddylist","populateRoomList","updateHotPonds","updatePondConnectedUsers","$joinPondTable","empty","sort","a","b","connection_count","pond","pondName","pond_id","replace","$existingRow","find","length","eq","text","append","joinPondByName","forbiddenNotes","containsBadWord","alert","pondMainWindow","joinPond","focus","openChatWindow","pondname","open","createWindow","id","title","app","icon","x","y","width","height","minWidth","minHeight","parent","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","preventOverlap","updatePondsTimer","$form","$input","e","preventDefault","val","currentTarget"],"mappings":"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"}