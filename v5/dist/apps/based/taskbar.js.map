{"version":3,"file":"taskbar.js","sources":["../../../apps/based/ui/Window/StartPanel.js","../../../apps/based/ui/Window/TaskBar.js","../../../apps/based/taskbar/taskbar.js"],"sourcesContent":["/* StartPanel.js - Marak Squires 2025 - BuddyPond */\nexport default class StartPanel {\n    constructor({ onAppLaunch, bp } = {}) {\n        this.onAppLaunch = onAppLaunch || function () { };\n        this.bp = bp;\n        this.panelElement = null;\n    }\n\n    open() {\n        if (this.panelElement) {\n            this.close();\n            return;\n        }\n\n        const panel = document.createElement('div');\n        panel.className = 'start-panel';\n        panel.style.display = 'none'; // hide initially for animation\n\n        const searchInput = document.createElement('input');\n        searchInput.id = 'start-panel-search';\n        searchInput.className = 'start-panel-search';\n        searchInput.type = 'text';\n        searchInput.placeholder = 'Search apps...';\n        searchInput.autocomplete = 'off';\n\n        const recentSection = document.createElement('div');\n        recentSection.className = 'start-panel-section';\n        recentSection.innerHTML = `<h3>Recent Apps</h3>`;\n        const recentGrid = document.createElement('div');\n        recentGrid.className = 'start-panel-grid';\n        recentSection.appendChild(recentGrid);\n\n        const allSection = document.createElement('div');\n        allSection.className = 'start-panel-section';\n        allSection.innerHTML = `<h3>All Apps</h3>`;\n        const allGrid = document.createElement('div');\n        allGrid.className = 'start-panel-grid';\n        allSection.appendChild(allGrid);\n\n        panel.appendChild(searchInput);\n        panel.appendChild(recentSection);\n        panel.appendChild(allSection);\n\n        document.body.appendChild(panel);\n        this.panelElement = panel;\n        // Animate it in\n        $(panel).css({\n            display: 'block',\n            opacity: 1,\n            transform: 'translateY(100%)',\n            transition: 'all 300ms ease-out'\n        });\n\n        requestAnimationFrame(() => {\n            $(panel).css({\n                opacity: 1,\n                transform: 'translateY(0)'\n            });\n        });\n\n        const recentApps = (window.bp?.apps?.ui?.recentApps || []).slice(0, 10);\n        recentApps.forEach(appData => {\n            const app = this.createAppTile(appData);\n            recentGrid.appendChild(app);\n        });\n\n        const appList = window.bp?.apps?.list || {};\n        const allAppEntries = Object.entries(appList);\n        allAppEntries.forEach(([appName, appData]) => {\n            if (appData.adminOnly && this.bp.me !== 'Marak') return;\n            appData.app = appData.app || appName;\n            appData.id = appData.id || appName;\n            const app = this.createAppTile(appData, appData.icon);\n            allGrid.appendChild(app);\n        });\n\n        searchInput.addEventListener('input', () => {\n            const query = searchInput.value.toLowerCase();\n            recentSection.style.display = query.length > 0 ? 'none' : '';\n            allGrid.querySelectorAll('.start-panel-app').forEach(el => {\n                const label = el.dataset.name.toLowerCase();\n                const _app = this.bp.apps.list[el.dataset.id];\n                let showResult = label.includes(query);\n                if (!showResult && _app?.alias) {\n                    showResult = _app.alias.some(alias => alias.toLowerCase().includes(query));\n                }\n                if (!showResult && _app?.categories) {\n                    showResult = _app.categories.some(cat => cat.toLowerCase().includes(query));\n                }\n                el.style.display = showResult ? 'flex' : 'none';\n            });\n        });\n\n        this.closeEventHandler = (event) => {\n            if ($(event.target).hasClass('taskbar-item')) return;\n            if (this.panelElement && !this.panelElement.contains(event.target) && event.target !== searchInput) {\n                this.close();\n            }\n        };\n\n        document.addEventListener('click', this.closeEventHandler);\n        if (!this.bp.isMobile()) {\n            // Remark: We don't want to focus the search input on mobile devices, since this brings up the keyboard\n            searchInput.focus();\n        }\n    }\n\n\n    close() {\n        if (this.panelElement) {\n            const $panel = $(this.panelElement);\n\n            $panel.css({\n                transform: 'translateY(0)',\n                opacity: 1,\n                transition: 'all 300ms ease-in'\n            });\n\n            requestAnimationFrame(() => {\n                $panel.css({\n                    transform: 'translateY(100%)',\n                    opacity: 1\n                });\n\n                setTimeout(() => {\n                    $panel.remove();\n                    this.panelElement = null;\n                }, 300); // match transition duration\n            });\n        }\n\n        if (this.closeEventHandler) {\n            document.removeEventListener('click', this.closeEventHandler);\n            this.closeEventHandler = null;\n        }\n    }\n\n    createAppTile(appData, icon) {\n        // console.log('Creating app tile for:', appData);\n        let name = appData.id || appData.appName || appData.name || appData.label || 'Unknown App';\n        icon = appData.icon || icon;\n        const tile = document.createElement('div');\n        tile.className = 'start-panel-app';\n        tile.dataset.name = name;\n        tile.dataset.id = appData.id || appData.app || name;\n        tile.dataset.app = appData.app || appData.id || name;\n        if (!icon && appData.type === 'buddy' && this.bp.apps.buddylist) {\n            // Remark: special case for default dicebar avatars for buddies\n            let defautSvgAvatar = this.bp.apps.buddylist.defaultAvatarSvg(appData.id.replace('messages/', ''));\n            const svgContainer = document.createElement('div');\n            svgContainer.className = 'start-panel-app-icon';\n            svgContainer.innerHTML = defautSvgAvatar;\n            tile.appendChild(svgContainer);\n        } else {\n            const img = document.createElement('img');\n            img.src = icon;\n            img.alt = name;\n            tile.appendChild(img);\n        }\n\n        const label = document.createElement('div');\n        label.textContent = appData.label || name;\n\n        tile.appendChild(label);\n\n        tile.onclick = async () => {\n            // TODO: this should be handled when adding the item to the recent apps list\n            if (appData.type === 'buddy' && appData.app === 'buddylist') {\n                appData.context = appData.id.replace('messages/', '');\n            }\n            let win = await this.bp.open(appData.app || appData.id, { context: appData.context, type: appData.type });\n            this.onAppLaunch(name);\n            this.close();\n        };\n\n        return tile;\n    }\n}\n\n// Enable keyboard navigation for the start panel\nStartPanel.prototype.enableKeyboardNavigation = function (panel, searchInput) {\n    // Add keyboard navigation\n    let currentIndex = -1;\n    let appTiles = [];\n\n    function updateTilesList() {\n        appTiles = Array.from(panel.querySelectorAll('.start-panel-app'))\n            .filter(el => el.style.display !== 'none');\n    }\n    updateTilesList();\n\n    // Add highlight class\n    function focusTile(index) {\n        console.log('Focusing tile at index:', index);\n        appTiles.forEach((el, i) => {\n            el.classList.toggle('focused', i === index);\n            if (i === index) el.scrollIntoView({ block: 'nearest' });\n        });\n        currentIndex = index;\n    }\n\n    // Clear highlight\n    function clearFocus() {\n        appTiles.forEach(el => el.classList.remove('focused'));\n        currentIndex = -1;\n    }\n\n    searchInput.addEventListener('keydown', (e) => {\n        if (e.key === 'ArrowDown') {\n            updateTilesList();\n            if (appTiles.length > 0) {\n                focusTile(0);\n                e.preventDefault();\n            }\n        }\n    });\n\n    let ROW_LENGTH = 5;\n\n    panel.addEventListener('keydown', (e) => {\n        console.log('Key pressed:', e.key);\n        if (appTiles.length === 0) return;\n\n\n        // tab key should select the first tile\n        if (e.key === 'Tab') {\n            // TODO: shift tab should select the last tile\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                // Move to next tile\n                let nextIndex = currentIndex + 1;\n                if (nextIndex < appTiles.length) {\n                    focusTile(nextIndex);\n                } else {\n                    // Stay on last tile if next tile is out of bounds\n                    focusTile(appTiles.length - 1);\n                }\n            }\n            e.preventDefault();\n            return;\n        }\n\n        if (e.key === 'ArrowDown') {\n            // ✅ If nothing is focused, focus first tile\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                // ✅ Move down one row\n                let nextIndex = currentIndex + ROW_LENGTH;\n                if (nextIndex < appTiles.length) {\n                    focusTile(nextIndex);\n                } else {\n                    // Stay on last tile if next row is out of bounds\n                    focusTile(appTiles.length - 1);\n                }\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'ArrowUp') {\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                // ✅ Move up one row\n                let prevIndex = currentIndex - ROW_LENGTH;\n                if (prevIndex >= 0) {\n                    focusTile(prevIndex);\n                } else {\n                    // Stay on first tile if already in top row\n                    focusTile(0);\n                }\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'ArrowRight') {\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                focusTile(Math.min(currentIndex + 1, appTiles.length - 1));\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'ArrowLeft') {\n            if (currentIndex === -1) {\n                focusTile(0);\n            } else {\n                focusTile(Math.max(currentIndex - 1, 0));\n            }\n            e.preventDefault();\n        }\n\n        if (e.key === 'Enter' && currentIndex >= 0) {\n            appTiles[currentIndex].click();\n            e.preventDefault();\n        }\n\n        if (e.key === 'Escape') {\n            clearFocus();\n            searchInput.focus();\n        }\n    });\n}","import StartPanel from \"./StartPanel.js\";\n\nexport default class TaskBar {\n    constructor({ homeCallback, bp } = {}) {\n        this.taskBarElement = document.createElement(\"div\");\n        this.taskBarElement.className = \"taskbar-container\";\n        document.body.appendChild(this.taskBarElement);\n\n        // Create containers for anchored and scrollable items\n        this.taskbarLeft = document.createElement(\"div\");\n        this.taskbarLeft.className = \"taskbar-left\";\n        this.taskBarElement.appendChild(this.taskbarLeft);\n\n        this.taskbarItems = document.createElement(\"div\");\n        this.taskbarItems.className = \"taskbar-items\";\n        this.taskBarElement.appendChild(this.taskbarItems);\n\n        this.taskbarRight = document.createElement(\"div\");\n        this.taskbarRight.className = \"taskbar-right\";\n        this.taskBarElement.appendChild(this.taskbarRight);\n\n        this.bp = bp; // Reference to the base platform instance\n        this.items = new Map(); // id -> config\n        this.shortcuts = new Set(); // id\n\n        // Add scroll listener for indicator visibility\n        this.taskbarItems.addEventListener('scroll', () => {\n            const isAtEnd = this.taskbarItems.scrollLeft + this.taskbarItems.clientWidth >= this.taskbarItems.scrollWidth - 1;\n            console.log(\"Scroll end reached:\", isAtEnd);\n            this.taskbarItems.setAttribute('data-scroll-end', isAtEnd);\n        });\n\n        function openStartPanel() {\n            if (!this.startPanel) {\n                this.startPanel = new StartPanel({ bp: this.bp });\n            }\n            this.startPanel.open();\n        }\n\n        // Add \"home\" button (anchored right)\n        if (homeCallback) {\n            this.addItem({\n                id: \"home\",\n                label: \"Home\",\n                onClick: openStartPanel,\n                icon: \"desktop/assets/images/icons/icon_mantra_64.png\",\n                isShortcut: true,\n                anchor: \"right\"\n            });\n        }\n\n        // Add \"settings\" button (anchored left on mobile)\n        if (this.bp.isMobile()) {\n            this.addItem({\n                id: \"settings\",\n                label: \"Settings\",\n                onClick: (e) => {\n                    e.stopPropagation();\n                    const $menu = $('.menu-bar'); // TODO: Reference class property, not DOM\n                    if ($menu.hasClass(\"mobile-active\")) {\n                        $menu.animate({ left: \"-100%\" }, 300, () => {\n                            $menu.removeClass(\"mobile-active\");\n                        });\n                    } else {\n                        $menu\n                            .css({ left: \"-100%\", display: \"flex\" })\n                            .addClass(\"mobile-active\")\n                            .animate({ left: \"0%\" }, 300);\n                    }\n                },\n                icon: \"desktop/assets/images/icons/icon_settings_64.png\",\n                isShortcut: true,\n                anchor: \"left\"\n            });\n        }\n        // Handle context menu (desktop)\n        this.taskBarElement.addEventListener('contextmenu', (e) => {\n            e.preventDefault();\n            const target = e.target.closest('.taskbar-item');\n            if (!target) return;\n            const id = target.dataset.id;\n            if (!id || id === 'home' || id === 'settings') return; // Exclude anchored items\n            this.showContextMenu(id, e.clientX, e.clientY);\n        });\n\n        // Handle long-press context menu (mobile)\n        if (this.bp.isMobile()) {\n            let pressTimer = null;\n            let startX = 0, startY = 0;\n\n            this.taskBarElement.addEventListener('touchstart', (e) => {\n\n                // e.preventDefault();\n                const touch = e.touches[0];\n                const target = e.target.closest('.taskbar-item');\n                if (!target) return;\n                const id = target.dataset.id;\n                if (!id || id === 'home' || id === 'settings') return;\n\n                startX = touch.clientX;\n                startY = touch.clientY;\n\n                pressTimer = setTimeout(() => {\n                    // Haptic feedback\n                    if (navigator.vibrate) {\n                        navigator.vibrate(10); // 10ms pulse\n                    }\n                    this.showContextMenu(id, startX, startY);\n                }, 600); // Long press threshold\n            });\n\n            this.taskBarElement.addEventListener('touchend', () => {\n                clearTimeout(pressTimer);\n            });\n\n            this.taskBarElement.addEventListener('touchmove', () => {\n                clearTimeout(pressTimer); // Cancel if finger moves\n            });\n        }\n\n        this.enableDragAndDrop();\n    }\n\n    showContextMenu(id, x, y) {\n        const existing = document.querySelector('.taskbar-context-menu');\n        if (existing) existing.remove();\n\n        const item = this.items.get(id);\n        if (!item) return;\n\n        const menu = document.createElement('div');\n        menu.className = 'taskbar-context-menu';\n        menu.style.position = 'fixed';\n        menu.style.left = `${x}px`;\n        menu.style.visibility = 'hidden';\n        document.body.appendChild(menu);\n\n        const makeOption = (label, handler) => {\n            const option = document.createElement('div');\n            option.className = 'taskbar-context-menu-item';\n            option.textContent = label;\n            option.onclick = () => {\n                handler();\n                this.startPanel.close();\n                menu.remove();\n            };\n            menu.appendChild(option);\n        };\n\n        if (item.isOpen) {\n            makeOption('Close', () => this.closeItem(id));\n        } else {\n            makeOption('Open', () => this.openItem(item));\n        }\n\n        if (this.shortcuts.has(id)) {\n            makeOption('Unpin from Taskbar', () => {\n                this.shortcuts.delete(id);\n                if (!item.isOpen) {\n                    this.removeItem(id);\n                }\n            });\n        } else {\n            if (item.app !== 'buddylist' && id !== 'buddylist' && item.app !== 'emulator') {\n                makeOption('Keep in Taskbar', () => {\n                    this.shortcuts.add(item.app || id);\n                    let installedTaskBarApps = this.bp.settings.taskbar_apps || {};\n                    installedTaskBarApps[item.app || id] = {\n                        app: item.app || id,\n                        context: item.context || 'default',\n                        label: item.label || id,\n                        icon: item.icon || ''\n                    };\n                    this.bp.set('taskbar_apps', installedTaskBarApps);\n                });\n            }\n        }\n\n        requestAnimationFrame(() => {\n            const menuHeight = menu.offsetHeight;\n            const viewportHeight = window.innerHeight;\n            let top = y - menuHeight - 4;\n            if (top < 0) {\n                top = y + 4;\n            }\n            menu.style.top = `${top}px`;\n            menu.style.visibility = 'visible';\n        });\n\n        const removeMenu = () => menu.remove();\n        setTimeout(() => {\n            window.addEventListener('click', removeMenu, { once: true });\n            window.addEventListener('contextmenu', removeMenu, { once: true });\n        }, 0);\n    }\n\n    // same as addItem ( calls into addItem )\n    // except it also saves the item to localStorage\n    // this is used when the user explicitly pins an app to the taskbar from outside API\n    saveItem(config) {\n        // first add the item to the taskbar\n        config.isShortcut = true; // Ensure it's treated as a shortcut\n        const itemElement = this.addItem(config);\n        if (!itemElement) return;\n\n        let { app, id, context, label = \"\", onClick, icon, isShortcut = true, anchor } = config;\n\n        let installedTaskBarApps = this.bp.settings.taskbar_apps || {};\n        if (id !== 'home' && id !== 'settings') {\n            installedTaskBarApps[app || id] = {\n                id: id,\n                app: app || id,\n                context: context || 'default',\n                label: label || id,\n                icon: icon || ''\n            };\n            this.bp.set('taskbar_apps', installedTaskBarApps);\n        }\n\n    }\n\n    addItem(config) {\n        let { app, id, context, label = \"\", onClick, icon, isShortcut = true, anchor } = config;\n\n        if (typeof onClick !== 'function') {\n            onClick = async (ev, itemElement) => {\n                let existingWindow = this.bp.apps.ui.windowManager.getWindow(id);\n                if (!existingWindow) {\n                    let win = await this.bp.open(app || id, { context });\n                } else {\n                    if (existingWindow.isMinimized) {\n                        existingWindow.restore();\n                        existingWindow.focus();\n                    } else {\n                        existingWindow.minimize();\n                    }\n                }\n                if (this.startPanel) {\n                    this.startPanel.close();\n                }\n                ev.stopPropagation();\n            };\n        }\n\n        let existing = this.taskBarElement.querySelector(`[data-id=\"${id}\"]`);\n        if (existing) return existing;\n\n        const itemElement = document.createElement(\"div\");\n        itemElement.className = \"taskbar-item\";\n        itemElement.dataset.id = id;\n        itemElement.draggable = id !== 'home' && id !== 'settings'; // Disable drag for anchored items\n\n        if (!this.bp.isMobile()) {\n            const itemText = document.createElement(\"div\");\n            itemText.className = \"taskbar-item-text\";\n            itemText.textContent = label;\n            itemElement.appendChild(itemText);\n        }\n\n        if (!icon && app === 'buddylist' && this.bp.apps.buddylist) {\n            // Remark: special case for default dicebar avatars for buddies\n            let defautSvgAvatar = this.bp.apps.buddylist.defaultAvatarSvg(context.replace('messages/', ''));\n            const svgContainer = document.createElement('div');\n            svgContainer.className = 'start-panel-app-icon';\n            svgContainer.innerHTML = defautSvgAvatar;\n            svgContainer.title = context;\n            label = label || context.replace('messages/', '');\n            // itemText.textContent = label; // Update text content with context\n            itemElement.appendChild(svgContainer);\n        } else if (icon) {\n            const itemIcon = document.createElement(\"img\");\n            itemIcon.src = icon;\n            itemIcon.height = 32;\n            itemIcon.width = 32;\n            itemIcon.alt = label;\n            itemElement.appendChild(itemIcon);\n        } else {\n            itemElement.textContent = label;\n        }\n\n        itemElement.onclick = (ev) => {\n            if (onClick) onClick.call(this, ev, itemElement);\n            this.alertItem(id);\n        };\n\n        if (isShortcut) {\n            this.shortcuts.add(id);\n        }\n\n        // Append to appropriate container\n        if (id === 'home' && anchor === 'right') {\n            this.taskbarRight.appendChild(itemElement);\n        } else if (id === 'settings' && anchor === 'left') {\n            this.taskbarLeft.appendChild(itemElement);\n        } else {\n            this.taskbarItems.appendChild(itemElement);\n            // Scroll to the newly added item\n            if (this.bp.isMobile()) {\n                requestAnimationFrame(() => {\n                    itemElement.scrollIntoView({ behavior: 'smooth', inline: 'start' });\n                });\n            }\n        }\n\n        this.items.set(id, {\n            ...config,\n            element: itemElement,\n            isOpen: false,\n            isShortcut: isShortcut\n        });\n\n        return itemElement;\n    }\n\n    openItem(config) {\n        let item = this.items.get(config.id);\n        if (item) {\n            item.isOpen = true;\n            item.element.classList.add(\"taskbar-item-open\");\n            // Scroll to the opened item\n            if (this.bp.isMobile()) {\n                requestAnimationFrame(() => {\n                    item.element.scrollIntoView({ behavior: 'smooth', inline: 'start' });\n                });\n            }\n        } else {\n            this.addItem({ ...config, isShortcut: false });\n            this.openItem(config); // Scroll happens in addItem\n        }\n    }\n\n    closeItem(id) {\n        const item = this.items.get(id);\n        if (!item) return;\n\n        item.isOpen = false;\n        item.element.classList.remove(\"taskbar-item-open\");\n\n        if (!this.shortcuts.has(id)) {\n            this.removeItem(id);\n        }\n\n        const win = this.bp.apps.ui.windowManager.getWindow(id);\n        if (win) {\n            win.close();\n        } else {\n            console.warn(`No window found with ID: ${id}`);\n        }\n    }\n\n    removeItem(id) {\n        const item = this.items.get(id);\n        if (!item) return;\n\n        item.element.parentNode.removeChild(item.element);\n        this.items.delete(id);\n        this.shortcuts.delete(id);\n\n        let taskBarApps = this.bp.settings.taskbar_apps || {};\n        if (taskBarApps[id]) {\n            delete taskBarApps[id];\n            this.bp.set('taskbar_apps', taskBarApps);\n        }\n    }\n\n    getItem(id) {\n        return this.items.get(id);\n    }\n\n    alertItem(id) {\n        const item = this.items.get(id);\n        if (item) {\n            item.element.classList.add(\"taskbar-item-alert\");\n            setTimeout(() => item.element.classList.remove(\"taskbar-item-alert\"), 1000);\n        }\n    }\n\n    enableDragAndDrop() {\n\n        let dragged = null;\n\n        this.taskbarItems.addEventListener(\"dragstart\", (e) => {\n            dragged = e.target.closest(\".taskbar-item\");\n            if (dragged && (dragged.dataset.id === 'home' || dragged.dataset.id === 'settings')) {\n                e.preventDefault(); // Prevent dragging anchored items\n                dragged = null;\n            }\n        });\n\n        this.taskbarItems.addEventListener(\"dragover\", (e) => {\n            e.preventDefault();\n            const over = e.target.closest(\".taskbar-item\");\n            if (dragged && over && dragged !== over && over.dataset.id !== 'home' && over.dataset.id !== 'settings') {\n                const draggedIndex = [...this.taskbarItems.children].indexOf(dragged);\n                const overIndex = [...this.taskbarItems.children].indexOf(over);\n                if (draggedIndex < overIndex) {\n                    this.taskbarItems.insertBefore(over, dragged);\n                } else {\n                    this.taskbarItems.insertBefore(dragged, over);\n                }\n            }\n        });\n\n        this.taskbarItems.addEventListener(\"dragend\", () => {\n            if (dragged) {\n                const newOrder = Array.from(this.taskbarItems.children).map(item => item.dataset.id);\n                // references the saved / pinned taskbar apps\n                let taskBarApps = this.bp.settings.taskbar_apps || {};\n                const newTaskBarApps = {};\n                newOrder.forEach(id => {\n                    // only save the order of taskbar apps that are currently pinned\n                    if (taskBarApps[id]) {\n                        let _app = taskBarApps[id];\n                        newTaskBarApps[id] = _app;\n                    }\n                });\n                this.bp.set('taskbar_apps', newTaskBarApps);\n            }\n            dragged = null;\n        });\n    }\n}","import TaskBar from '../ui/Window/TaskBar.js';\n\nexport default class TaskBarApp {\n  constructor(bp, options = {}) {\n    this.bp = bp;\n    return this;\n  }\n\n  async init() {\n    return 'loaded TaskBarApp';\n  }\n\n  async open(options = {}) {\n\n    if (this.taskBar) {\n      console.log('TaskBar already open');\n      //$('.taskbar-container').css('display', 'flex').hide().fadeIn({ easing: 'linear', duration: 555 });\n      return;\n    }\n    // Remark: Why is TaskBar in the WindowManager?\n    // shouldn't this be in the UI class?\n    this.taskBar = new TaskBar({\n      bp: this.bp,\n      homeCallback: () => {\n\n        if (!this.state) {\n          // save current window positions\n          this.lastPositionsBeforeArranged = this.windows.map(w => {\n            return {\n              x: w.x,\n              y: w.y,\n              height: w.height,\n              width: w.width\n            }\n          });\n          // console.log('lastPositionsBeforeArranged', this.lastPositionsBeforeArranged);\n          this.state = 'maximized';\n        }\n\n        if (this.state === 'minimized') {\n          this.minimizeAllWindows();\n          // this.arrangeHorizontalStacked();\n          this.state = 'maximized';\n\n        } else if (this.state === 'stacked-vertical') {\n          // stack-vertical has been removed ( for now )\n          // it wasn't looking good as a default and was rarely used\n          /*\n          // restore all windows to their previous positions\n          this.windows.forEach((w, i) => {\n              w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n              w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n          });\n          this.state = 'maximized';\n          */\n\n        } else if (this.state === 'stacked-horizontal') {\n          // this.arrangeVerticalStacked();\n          // this.state = 'stacked-vertical';\n          // restore all windows to their previous positions\n          this.windows.forEach((w, i) => {\n            w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n            w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n          });\n          this.state = 'maximized';\n\n        } else {\n          this.minimizeAllWindows(true);\n          this.windows.forEach((w, i) => {\n            w.move(this.lastPositionsBeforeArranged[i].x, this.lastPositionsBeforeArranged[i].y);\n            w.setSize(this.lastPositionsBeforeArranged[i].width + 'px', this.lastPositionsBeforeArranged[i].height + 'px');\n          });\n\n          this.state = 'minimized';\n\n        }\n\n        // close all windows\n        // this.minimizeAllWindows();\n        // this.windowsClosed = true;\n\n        // hide all legacy BP windows\n        $('.window').hide();\n        $('.window').removeClass('window_stack');\n\n      }\n    });\n\n    let installedTaskBarApps = this.bp.settings.taskbar_apps || {};\n\n    if (Object.keys(installedTaskBarApps).length === 0) {\n\n        let defaultTaskBarApps = [\n            'file-explorer',\n            'pad',\n            'buddylist',\n            // 'pond',\n            'portfolio',\n        ];\n\n        if (this.bp.isMobile()) {\n            defaultTaskBarApps = [\n                'buddylist',\n                // 'pond',\n                'portfolio',\n                'coin',\n                //'youtube',\n                'fluid-simulation',\n            ]\n        }\n\n        defaultTaskBarApps.forEach(appName => {\n            let app = this.bp.apps.list[appName];\n            if (app) {\n                // console.log(`Adding default taskbar app: ${appName}`);\n                installedTaskBarApps[appName] = {\n                    app: app.app || appName,\n                    context: app.context || 'default',\n                    label: app.label || appName,\n                    icon: app.icon || ''\n                };\n            } else {\n                console.warn(`App ${appName} not found in desktop app list.`);\n            }\n        });\n    }\n\n    Object.keys(installedTaskBarApps).forEach(appName => {\n        let savedApp = installedTaskBarApps[appName];\n        //console.log('Adding taskbar app', appName);\n        //console.log(this.bp.apps.list)\n        // console.log('savedApp', appName, savedApp);\n        let app = this.bp.apps.list[savedApp.id || appName];\n        if (!app) {\n            console.warn(`App ${appName} not found in desktop app list.`);\n            return;\n        }\n\n        app.id = appName; // ensure the app has an id for taskbar\n        app.app = app.app || appName; // ensure the app has an app property\n        // create new app object with necessary properties\n        let _app = {\n            ...app\n        }\n        if (_app) {\n            // console.log(`Adding default taskbar app: ${appName}`, _app);\n            this.taskBar.saveItem(_app);\n        } else {\n            console.warn(`App ${appName} not found in desktop app list.`);\n        }\n    });\n\n     $('.taskbar-container').css('display', 'flex').hide().fadeIn({ easing: 'linear', duration: 555 });\n  }\n}"],"names":["StartPanel","constructor","onAppLaunch","bp","this","panelElement","open","close","panel","document","createElement","className","style","display","searchInput","id","type","placeholder","autocomplete","recentSection","innerHTML","recentGrid","appendChild","allSection","allGrid","body","$","css","opacity","transform","transition","requestAnimationFrame","window","apps","ui","recentApps","slice","forEach","appData","app","createAppTile","appList","list","Object","entries","appName","adminOnly","me","icon","addEventListener","query","value","toLowerCase","length","querySelectorAll","el","label","dataset","name","_app","showResult","includes","alias","some","categories","cat","closeEventHandler","event","target","hasClass","contains","isMobile","focus","$panel","setTimeout","remove","removeEventListener","tile","buddylist","defautSvgAvatar","defaultAvatarSvg","replace","svgContainer","img","src","alt","textContent","onclick","async","context","prototype","enableKeyboardNavigation","currentIndex","appTiles","updateTilesList","Array","from","filter","focusTile","index","console","log","i","classList","toggle","scrollIntoView","block","e","key","preventDefault","nextIndex","prevIndex","Math","min","max","click","TaskBar","homeCallback","taskBarElement","taskbarLeft","taskbarItems","taskbarRight","items","Map","shortcuts","Set","isAtEnd","scrollLeft","clientWidth","scrollWidth","setAttribute","addItem","onClick","startPanel","isShortcut","anchor","stopPropagation","$menu","animate","left","removeClass","addClass","closest","showContextMenu","clientX","clientY","pressTimer","startX","startY","touch","touches","navigator","vibrate","clearTimeout","enableDragAndDrop","x","y","existing","querySelector","item","get","menu","position","visibility","makeOption","handler","option","isOpen","closeItem","openItem","has","delete","removeItem","add","installedTaskBarApps","settings","taskbar_apps","set","menuHeight","offsetHeight","top","removeMenu","once","saveItem","config","ev","itemElement","existingWindow","windowManager","getWindow","isMinimized","restore","minimize","draggable","itemText","title","itemIcon","height","width","call","alertItem","behavior","inline","element","win","warn","parentNode","removeChild","taskBarApps","getItem","dragged","over","children","indexOf","insertBefore","newOrder","map","newTaskBarApps","TaskBarApp","options","init","taskBar","state","lastPositionsBeforeArranged","windows","w","minimizeAllWindows","move","setSize","hide","keys","defaultTaskBarApps","savedApp","fadeIn","easing","duration"],"mappings":"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"}