class e{constructor(e,t={}){return this.bp=e,this.options=t,this}async init(){return this.html=await this.bp.load("/v5/apps/based/welcome/welcome.html"),await this.bp.load("/v5/apps/based/welcome/welcome.css"),this.affirmations=await this.bp.importModule("affirmations"),"loaded Welcome"}async open(){this.win=await this.bp.window(this.window()),$(".loggedIn",this.win.content).hide(),$(".loggedOut",this.win.content).show(),this.bindUIEvents(),this.handleAuthentication(),$('.welcomeForm input[name="username"]',this.win.content).focus()}window(){return{id:"welcome",title:"Welcome Buddy",icon:"desktop/assets/images/icons/icon_buddy-frog_64.png",position:"center",parent:$("#desktop")[0],width:850,height:600,content:this.html,resizable:!0,closable:!0,onClose:()=>{this.win=null}}}}e.prototype.bindUIEvents=function(){let e=this.bp.apps.client.api,t=this.bp.apps.affirmations.affirmations;function o(){let e=t[Math.floor(Math.random()*t.length)];$(".welcome-positiveAffirmation").html(e)}$(".welcomeForm").submit((t=>{t.preventDefault(),$(".loginButton").prop("disabled",!0),$(".loginButton").addClass("disabled");let o=$('.welcomeForm input[name="username"]').val(),s=$('.welcomeForm input[name="password"]').val();return s||(s=o),e.authBuddy(o,s,(async(e,t)=>{if(console.log("authBuddy",e,t),e)return t&&t.error?($(".loginStatus").html(t.error).addClass("error"),"Incorrect password."===t.error&&$(".resetPasswordLink").show()):"Failed to fetch"===e.message?$(".loginStatus").text("Failed to connect to Buddy Pond"):$(".loginStatus").html(e.message||"Failed to authenticate buddy"),$(".loginButton").prop("disabled",!1),$(".loginButton").removeClass("disabled"),$(".password").show().focus(),void console.error("Failed to authenticate buddy:",e);if(t.success)this.bp.connected=!0,t.me=o,await this.bp.open("buddylist"),bp.emit("auth::qtoken",t),this.win.close(),$(".welcomeForm .error").text("");else{if($(".loginButton").prop("disabled",!1),$(".loginButton").removeClass("disabled"),o===s)return $(".password").show(),void $(".password").focus();$(".welcomeForm .error").text("Failed to authenticate buddy"),$(".password").show(),console.error("Failed to authenticate buddy:")}})),!1})),$(".onlineStatusSelect").change((e=>{let t=$(e.target).val();bp.emit("profile::status",t)})),$(".forgot-password").on("click",(e=>(e.preventDefault(),$(".welcomeForm").flexHide(),$(".forgot-password-modal").flexShow(),$(".welcome-tos-checkbox").flexHide(),$(".loginStatus").html(""),$(".resetPasswordLink").flexHide(),!1))),$(".closeForgotPassword").on("click",(e=>{$(".forgot-password-modal").flexHide(),$(".welcomeForm").flexShow(),$(".welcome-tos-checkbox").flexShow(),$(".resetPasswordLink").flexShow()})),$(".resetPasswordButton").on("click",(t=>{t.preventDefault();let o=$(".resetPasswordEmail").val();o?($(".resetPasswordEmail").removeClass("error"),$(".loginStatus").html("Sending password reset email..."),$(".resetPasswordForm").flexHide(),$(".resetPasswordMessage").flexHide(),e.sendPasswordResetEmail(o,((e,t)=>{if(e||!t.success)return $(".loginStatus").html("Failed to send password reset email."),void console.error(e||t);$(".loginStatus").removeClass("error").addClass("success").html(t.message)}))):$(".resetPasswordEmail").addClass("error")})),$(".loginButton").prop("disabled",!0),$(".loginButton").addClass("disabled"),$("#welcome-tosAgree").change((function(){$(this).is(":checked")?($(".loginButton").prop("disabled",!1),$(".loginButton").removeClass("disabled")):($(".loginButton").prop("disabled",!0),$(".loginButton").addClass("disabled"))})),this.positiveAffirmationInterval&&clearInterval(this.positiveAffirmationInterval),this.positiveAffirmationInterval=setInterval((function(){$(".welcome-positiveAffirmation").fadeOut({duration:4444,complete:function(){o(),$(".welcome-positiveAffirmation").fadeIn({duration:4444,complete:function(){}})}})}),199800),o(),$(".welcome-positiveAffirmation").on("click",(function(){o()}))},e.prototype.handleAuthentication=function(){const e=this.bp.apps.client.api,t=localStorage.getItem("qtokenid"),o=localStorage.getItem("me");t?e.verifyToken(o,t,(async(e,s)=>{if(e)return console.error("Failed to verify token:",e),$(".password").show(),void $(".loginForm .error").text("Failed to authenticate buddy");console.log("verified token",s),s.success?(this.bp.connected=!0,window.discordView?await this.bp.open("buddylist",{openDefaultPond:!1}):await this.bp.open("buddylist",{}),this.bp.emit("auth::qtoken",{qtokenid:t,me:o,hasPassword:s.user.hasPassword}),$(".loggedIn").flexShow(),$(".loggedOut").flexHide(),s.user.hasPassword||this.bp.open("pincode"),this.win&&this.win.close&&this.win.close()):($(".loginForm .error").text("Failed to authenticate buddy"),$(".password").show(),console.error("Failed to authenticate buddy:"))})):$("#welcome").show()};export{e as default};
//# sourceMappingURL=welcome.js.map
