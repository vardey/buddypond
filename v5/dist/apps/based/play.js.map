{"version":3,"file":"play.js","sources":["../../../apps/based/play/AudioNode.js","../../../apps/based/play/play.js"],"sourcesContent":["export default class AudioNode {\n  constructor(audioElement, defaultVolume = 0.0) {\n    this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    this.audioElement = audioElement;\n\n    // Create MediaElementSource\n    this.source = this.audioCtx.createMediaElementSource(audioElement);\n\n    // Default gain node (volume)\n    this.gainNode = this.audioCtx.createGain();\n    this.gainNode.gain.value = defaultVolume;\n\n    // Keep track of nodes in the chain\n    this.nodes = [this.gainNode];\n\n    // Connect initial graph\n    this._connectGraph();\n  }\n\n  _connectGraph() {\n\n    // Disconnect first to avoid duplicate connections\n    // Remark: Probably should add this back?\n    // this.source.disconnect();\n\n    // Connect chain: source -> ...nodes -> destination\n    let prevNode = this.source;\n    this.nodes.forEach(node => {\n      prevNode.connect(node);\n      prevNode = node;\n    });\n    prevNode.connect(this.audioCtx.destination);\n  }\n\n  addNode(node) {\n    this.nodes.push(node);\n    this._connectGraph(); // rebuild graph\n  }\n\n  removeNode(node) {\n    this.nodes = this.nodes.filter(n => n !== node);\n    this._connectGraph();\n  }\n\n  // --- Volume controls ---\n  setVolume(value) {\n    this.gainNode.gain.value = value;\n  }\n\n  getVolume() {\n    return this.gainNode.gain.value;\n  }\n\n  // --- Playback controls ---\n  play() {\n    this.audioCtx.resume();\n    this.audioElement.play();\n  }\n\n  pause() {\n    this.audioElement.pause();\n  }\n\n  disconnect() {\n    this.source.disconnect();\n    this.nodes.forEach(node => node.disconnect());\n    this.audioCtx.close();\n  }\n\n  printGraph() {\n    console.log('Audio Graph:');\n    console.log('Source -> ' + this.nodes.map(n => n.constructor.name).join(' -> ') + ' -> Destination');\n  }\n}\n","// Buddy Pond - Play.js - Marak Squires 2024\nimport AudioNode from './AudioNode.js';\n\nexport default class Play {\n    // Map to track playing files and avoid concurrent plays\n    static playing = new Map();\n\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.settings = { ...options };\n    }\n\n    async init () {\n        this.bp.play = this.play.bind(this);\n    }\n\n    async play(mediaPath, {\n        tryHard = 0,\n        repeat = false,\n        duration = 999999, onEnd = () => {}, onError = () => {} } = {}) {\n        if (this.bp.settings.audio_enabled === false) {\n            return;\n        }\n    \n        // Check if media is already playing and if retries are not allowed\n        if (Play.playing.get(mediaPath) && !tryHard) {\n            // console.log(`Warning: Already playing ${mediaPath}. Will not play the same media file concurrently.`);\n            return;\n        }\n    \n        // check if mediaPath starts with http, if not prepend the host\n        if (!mediaPath.startsWith('http')) {\n            mediaPath = this.bp.config.host + '/' + mediaPath;\n        }\n\n        // Mark the media as playing\n        Play.playing.set(mediaPath, true);\n    \n        const media = new Audio(mediaPath);\n        let currentVolume = this.bp.get('audio_volume');\n        // ensure that currentVolume is a number, if not default to 1\n        if (typeof currentVolume !== 'number' || isNaN(currentVolume)) {\n            currentVolume = 1.0;\n        }\n\n        // TODO: Would probably be better to have a single AudioNode for the play.js app, instead of one per play() call\n        const audioNode = new AudioNode(media, currentVolume);\n\n        this.bp.on('settings::audio_volume', 'update-playing-volume', function(volume){\n            console.log('Updating playing volume to', volume);\n            audioNode.setVolume(volume);\n        });\n\n        let stopTimeout;\n        let forceStop = false;\n    \n        const cleanup = () => {\n            clearTimeout(stopTimeout);\n            media.pause();\n            media.currentTime = 0;\n            media.loop = false;\n            forceStop = true;\n            Play.playing.delete(mediaPath);\n            // remove the event listener\n            this.bp.off('settings::audio_volume', 'update-playing-volume');\n            audioNode.disconnect();\n        };\n    \n        const stopAtDuration = () => {\n            stopTimeout = setTimeout(() => {\n                cleanup();\n                onEnd();\n            }, duration);\n        };\n    \n        media.addEventListener('ended', () => {\n            if (!repeat || forceStop) {\n                cleanup();\n                onEnd();\n            }\n            // If repeating, do nothing â€” allow media.loop to handle replay\n        });\n    \n        media.addEventListener('error', (err) => {\n            cleanup();\n            onError(err);\n        });\n    \n        try {\n            // Handle repeat logic\n            if (repeat) {\n                media.loop = true;\n            }\n    \n            await media.play();\n            stopAtDuration();\n        } catch (error) {\n            cleanup();\n            onError(error);\n        }\n    }\n    \n    \n}\n"],"names":["AudioNode","constructor","audioElement","defaultVolume","this","audioCtx","window","AudioContext","webkitAudioContext","source","createMediaElementSource","gainNode","createGain","gain","value","nodes","_connectGraph","prevNode","forEach","node","connect","destination","addNode","push","removeNode","filter","n","setVolume","getVolume","play","resume","pause","disconnect","close","printGraph","console","log","map","name","join","Play","static","Map","bp","options","settings","init","bind","mediaPath","tryHard","repeat","duration","onEnd","onError","audio_enabled","playing","get","startsWith","config","host","set","media","Audio","currentVolume","isNaN","audioNode","stopTimeout","on","volume","forceStop","cleanup","clearTimeout","currentTime","loop","delete","off","addEventListener","err","setTimeout","error"],"mappings":"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"}