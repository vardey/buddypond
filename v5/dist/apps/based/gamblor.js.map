{"version":3,"file":"gamblor.js","sources":["../../../apps/based/gamblor/lib/client.js","../../../apps/based/gamblor/gamblor.js"],"sourcesContent":["const client = {};\n\nclient.endpoint = buddypond.gamblorEndpoint;\n\nclient.apiRequest = async (uri, method = 'GET', data = null) => {\n\n    const options = {\n        method: method\n    };\n\n    let headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        \"X-Me\": buddypond.me\n      };\n      if (buddypond.qtokenid) {\n        headers[\"Authorization\"] = `Bearer ${buddypond.qtokenid}`; // âœ… Use Authorization header\n      }\n\n\n    if (data) {\n        options.body = JSON.stringify(data);\n    }\n\n    options.headers = headers;\n\n    let url = `${client.endpoint}${uri}`;\n    console.log('admin client making api request', url, options);\n \n\n    try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Error in API request:', error);\n        throw error;\n    }\n\n};\n\nexport default client;","import client from './lib/client.js';\n\nexport default class Gamblor {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        return this;\n    }\n\n    async init() {\n        this.bp.log('Hello from Gamblor');\n\n        this.client = client;\n\n        // we can load modules or html fragments or css files here\n        // using this.bp.load() method\n\n        // injects CSS link tag into the head of document\n        await this.bp.load('/v5/apps/based/gamblor/gamblor.css');\n\n        // fetches html from the fragment and returns it as a string\n        this.html = await this.bp.load('/v5/apps/based/gamblor/gamblor.html');\n\n        return this;\n    }\n\n    async open () {\n\n\n        this.gamblorWindow = this.bp.apps.ui.windowManager.createWindow({\n            id: 'casino',\n            title: 'Hello Gamblor',\n            x: 50,\n            y: 100,\n            width: 400,\n            height: 300,\n            minWidth: 200,\n            minHeight: 200,\n            icon: 'desktop/assets/images/icons/icon_admin_64.png',\n            parent: $('#desktop')[0],\n            content: this.html,\n            resizable: true,\n            minimizable: true,\n            maximizable: true,\n            closable: true,\n            focusable: true,\n            maximized: false,\n            minimized: false\n        });\n\n        let result = await this.client.apiRequest('/bets', 'GET');\n        let bets = result.results || [];\n\n        /*\n        if (bets.error) {\n            gamblorWindow.setContent(`<div class=\"error\">Error loading bets: ${bets.error}</div>`);\n            return gamblorWindow;\n        }\n        */\n\n        // populate the gamblor-bets-table\n        console.log('bets result', bets);\n\n        $('.gamblor-bets-table body', this.gamblorWindow.content).empty();\n        bets.forEach(bet => {\n          console.log('bet', bet);\n            let row = `<tr>\n                <td>${bet.id}</td>\n                <td>${bet.owner}</td>\n                <td>${bet.type}</td>\n                <td>${bet.symbol}</td>\n                <td>${bet.amount}</td>\n                <td>${bet.status}</td>\n                <td>${bet.max_participants}</td>\n                <td>${bet.participants_count}</td>\n                <td>${bet.ctime} ${new Date(bet.ctime).toLocaleString()}</td>\n            </tr>`;\n            $('.gamblor-bets-table tbody', this.gamblorWindow.content).append(row);\n        });\n        \n        return this.gamblorWindow;\n\n\n    }\n}"],"names":["client","endpoint","buddypond","gamblorEndpoint","apiRequest","async","uri","method","data","options","headers","Accept","me","qtokenid","body","JSON","stringify","url","console","log","response","fetch","ok","Error","status","json","error","Gamblor","constructor","bp","this","init","load","html","open","gamblorWindow","apps","ui","windowManager","createWindow","id","title","x","y","width","height","minWidth","minHeight","icon","parent","$","content","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","bets","results","empty","forEach","bet","row","owner","type","symbol","amount","max_participants","participants_count","ctime","Date","toLocaleString","append"],"mappings":"AAAA,MAAMA,EAAS,CAAE,EAEjBA,EAAOC,SAAWC,UAAUC,gBAE5BH,EAAOI,WAAaC,MAAOC,EAAKC,EAAS,MAAOC,EAAO,QAEnD,MAAMC,EAAU,CACZF,OAAQA,GAGZ,IAAIG,EAAU,CACVC,OAAU,mBACV,eAAgB,kCAChB,OAAQT,UAAUU,IAEhBV,UAAUW,WACZH,EAAuB,cAAI,UAAUR,UAAUW,YAI/CL,IACAC,EAAQK,KAAOC,KAAKC,UAAUR,IAGlCC,EAAQC,QAAUA,EAElB,IAAIO,EAAM,GAAGjB,EAAOC,WAAWK,IAC/BY,QAAQC,IAAI,kCAAmCF,EAAKR,GAGpD,IACI,MAAMW,QAAiBC,MAAMJ,EAAKR,GAClC,IAAKW,EAASE,GACV,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,UAEpD,aAAaJ,EAASK,MACzB,CAAC,MAAOC,GAEL,MADAR,QAAQQ,MAAM,wBAAyBA,GACjCA,CACd,GCrCe,MAAMC,EACjB,WAAAC,CAAYC,EAAIpB,EAAU,IAEtB,OADAqB,KAAKD,GAAKA,EACHC,IACf,CAEI,UAAMC,GAcF,OAbAD,KAAKD,GAAGV,IAAI,sBAEZW,KAAK9B,OAASA,QAMR8B,KAAKD,GAAGG,KAAK,sCAGnBF,KAAKG,WAAaH,KAAKD,GAAGG,KAAK,uCAExBF,IACf,CAEI,UAAMI,GAGFJ,KAAKK,cAAgBL,KAAKD,GAAGO,KAAKC,GAAGC,cAAcC,aAAa,CAC5DC,GAAI,SACJC,MAAO,gBACPC,EAAG,GACHC,EAAG,IACHC,MAAO,IACPC,OAAQ,IACRC,SAAU,IACVC,UAAW,IACXC,KAAM,gDACNC,OAAQC,EAAE,YAAY,GACtBC,QAASrB,KAAKG,KACdmB,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,WAAW,IAGf,IACIC,SADe7B,KAAK9B,OAAOI,WAAW,QAAS,QACjCwD,SAAW,GA6B7B,OAnBA1C,QAAQC,IAAI,cAAewC,GAE3BT,EAAE,2BAA4BpB,KAAKK,cAAcgB,SAASU,QAC1DF,EAAKG,SAAQC,IACX7C,QAAQC,IAAI,MAAO4C,GACjB,IAAIC,EAAM,6BACAD,EAAIvB,gCACJuB,EAAIE,mCACJF,EAAIG,kCACJH,EAAII,oCACJJ,EAAIK,oCACJL,EAAIvC,oCACJuC,EAAIM,8CACJN,EAAIO,gDACJP,EAAIQ,SAAS,IAAIC,KAAKT,EAAIQ,OAAOE,2CAE3CvB,EAAE,4BAA6BpB,KAAKK,cAAcgB,SAASuB,OAAOV,MAG/DlC,KAAKK,aAGpB"}