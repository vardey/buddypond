{"version":3,"file":"soundrecorder.js","sources":["../../../apps/based/soundrecorder/soundrecorder.js"],"sourcesContent":["export default class SoundRecorder {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        return this;\n    }\n\n    async init() {\n        this.bp.log('Hello from SoundRecorder');\n\n        // TODO: make this a broadcast channel, the youtube app also uses message event, triggering this code\n        let eventMethod = window.addEventListener ? 'addEventListener' : 'attachEvent';\n        let eventer = window[eventMethod];\n        let messageEvent = eventMethod == 'attachEvent' ? 'onmessage' : 'message';\n    \n        // Listen to message from child window\n        eventer(messageEvent, (e) => {\n          // console.log(\"desktop.app.soundrecorder: message received\", e);\n          let key = e.message ? 'message' : 'data';\n          let data = e[key];\n          if (data === 'app_soundrecorder_needs_close') {\n            // close the window\n            this.soundRecorderWindow.close();\n            return;\n          }\n    \n          try {\n            let message = JSON.parse(data);\n            if (message.app === 'soundrecorder') {\n              console.log(`desktop.app.soundrecorder: message received:`, message);\n              console.log('emit buddy::sendMessage', message);\n              bp.emit('buddy::sendMessage', message);\n\n            }\n          } catch (err) {\n            console.error('desktop.app.soundrecorder: error parsing message:', err);        \n          }\n    \n        },false);\n      \n\n        return 'loaded SoundRecorder';\n    }\n\n\n    async open (params = {}) {\n\n\n        if (!this.soundRecorderWindow) {\n\n\n\n            let soundUrlQueryParam = '';\n            let context = '';\n            let type = '';\n          \n            if (params.type) {\n              type = '&type=' + params.type;\n            }\n          \n            if (params.context) {\n              context = '&context=' + params.context;\n            }\n          \n            if (params.soundUrl) {\n              desktop.app.soundrecorder.activeSound = params.soundUrl;\n              soundUrlQueryParam = '&src=' + params.soundUrl;\n              // desktop.app.soundrecorder.mode = 'closeAfterPlayed';\n            }\n          \n            let qtokenidParam = '';\n            if (bp.apps.client.api.qtokenid) {\n              qtokenidParam = '&_qtokenid=' + bp.apps.client.api.qtokenid  + `&_me=${bp.me}`;\n            }\n    \n            let src;\n            if (params.soundUrl) {\n              src = `v5/apps/based/soundrecorder/vendor/programs/sound-recorder/index.html?AC=3${qtokenidParam}${soundUrlQueryParam}${type}${context}`;\n            } else {\n              src = `v5/apps/based/soundrecorder/vendor/programs/sound-recorder/index.html?AC=3${qtokenidParam}${type}${context}`;\n            }\n    \n            this.soundRecorderWindow = this.bp.apps.ui.windowManager.createWindow({\n                id: 'soundrecorder',\n                title: 'Sound Recorder',\n                x: 50,\n                y: 100,\n                width: 662,\n                height: 388,\n                minWidth: 200,\n                minHeight: 200,\n                parent: $('#desktop')[0],\n                icon: '/desktop/assets/images/icons/icon_soundrecorder_64.png',\n                iframeContent: src,\n                resizable: true,\n                minimizable: true,\n                maximizable: true,\n                closable: true,\n                focusable: true,\n                maximized: false,\n                minimized: false,\n                onClose: () => {\n                    this.soundRecorderWindow = null;\n                }\n            });\n        }\n\n        // Focus on the newly created or updated window\n        this.bp.apps.ui.windowManager.focusWindow(this.soundRecorderWindow);\n\n    }\n\n}"],"names":["SoundRecorder","constructor","bp","options","this","init","log","eventMethod","window","addEventListener","eventer","e","data","message","JSON","parse","app","console","emit","err","error","soundRecorderWindow","close","open","params","soundUrlQueryParam","context","type","soundUrl","desktop","soundrecorder","activeSound","src","qtokenidParam","apps","client","api","qtokenid","me","ui","windowManager","createWindow","id","title","x","y","width","height","minWidth","minHeight","parent","$","icon","iframeContent","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","focusWindow"],"mappings":"AAAe,MAAMA,EACjB,WAAAC,CAAYC,EAAIC,EAAU,IAEtB,OADAC,KAAKF,GAAKA,EACHE,IACf,CAEI,UAAMC,GACFD,KAAKF,GAAGI,IAAI,4BAGZ,IAAIC,EAAcC,OAAOC,iBAAmB,mBAAqB,cA8BjE,OAzBAC,EAJcF,OAAOD,IACa,eAAfA,EAA+B,YAAc,WAGzCI,IAErB,IACIC,EAAOD,EADDA,EAAEE,QAAU,UAAY,QAElC,GAAa,kCAATD,EAMJ,IACE,IAAIC,EAAUC,KAAKC,MAAMH,GACL,kBAAhBC,EAAQG,MACVC,QAAQX,IAAI,+CAAgDO,GAC5DI,QAAQX,IAAI,0BAA2BO,GACvCX,GAAGgB,KAAK,qBAAsBL,GAGjC,CAAC,MAAOM,GACPF,QAAQG,MAAM,oDAAqDD,EAC/E,MAdYf,KAAKiB,oBAAoBC,WAgB3B,GAGK,sBACf,CAGI,UAAMC,CAAMC,EAAS,IAGjB,IAAKpB,KAAKiB,oBAAqB,CAI3B,IAAII,EAAqB,GACrBC,EAAU,GACVC,EAAO,GAEPH,EAAOG,OACTA,EAAO,SAAWH,EAAOG,MAGvBH,EAAOE,UACTA,EAAU,YAAcF,EAAOE,SAG7BF,EAAOI,WACTC,QAAQb,IAAIc,cAAcC,YAAcP,EAAOI,SAC/CH,EAAqB,QAAUD,EAAOI,UAIxC,IAKII,EALAC,EAAgB,GAChB/B,GAAGgC,KAAKC,OAAOC,IAAIC,WACrBJ,EAAgB,cAAgB/B,GAAGgC,KAAKC,OAAOC,IAAIC,SAAY,QAAQnC,GAAGoC,MAK1EN,EADER,EAAOI,SACH,6EAA6EK,IAAgBR,IAAqBE,IAAOD,IAEzH,6EAA6EO,IAAgBN,IAAOD,IAG5GtB,KAAKiB,oBAAsBjB,KAAKF,GAAGgC,KAAKK,GAAGC,cAAcC,aAAa,CAClEC,GAAI,gBACJC,MAAO,iBACPC,EAAG,GACHC,EAAG,IACHC,MAAO,IACPC,OAAQ,IACRC,SAAU,IACVC,UAAW,IACXC,OAAQC,EAAE,YAAY,GACtBC,KAAM,yDACNC,cAAerB,EACfsB,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,WAAW,EACXC,QAAS,KACLzD,KAAKiB,oBAAsB,OAG/C,CAGQjB,KAAKF,GAAGgC,KAAKK,GAAGC,cAAcsB,YAAY1D,KAAKiB,oBAEvD"}