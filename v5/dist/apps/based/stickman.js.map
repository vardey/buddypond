{"version":3,"file":"stickman.js","sources":["../../../apps/based/stickman/stickman.js","../../../apps/based/stickman/lib/startLoadingSequence.js"],"sourcesContent":["import startLoadingSequence from './lib/startLoadingSequence.js';\n\nexport default class StickMan {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n        this.waveCount = 0; // Track number of wave gestures\n        this.isSpinning = false; // Flag for spin animation\n        this.spinAngle = 0; // Current spin angle\n        this.backgroundColor = 'rgb(50, 50, 100)'; // Default background\n        return this;\n    }\n\n    async init() {\n        await this.bp.appendScript('https://cdn.jsdelivr.net/npm/@mediapipe/pose');\n        await this.bp.appendScript('https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils');\n        this.html = await this.bp.load('/v5/apps/based/stickman/stickman.html');\n        await this.bp.appendCSS('/v5/apps/based/stickman/stickman.css');\n        return 'loaded StickMan';\n    }\n\n    async open() {\n\n        if (window.discordView) {\n            this.bp.alert(`Stickman is a camera assisted computer-vision app and is not available in Discord Activities.<br/>Please visit <a target=\"_blank\" href=\"https://buddypond.com/app/stickman\">BuddyPond</a> to use Stickman.`, {\n                title: 'Sorry!'\n            });\n            return;\n        }\n\n\n\n        if (this.win) {\n            this.win.restore();\n            this.win.focus();\n            return this.win;\n        }\n\n        this.win = this.bp.window(this.window());\n        this.startLoadingSequence();\n\n        this.startStickMan();\n        this.win.maximize();\n        return this.win;\n    }\n\n    window() {\n        const content = this.html;\n        return {\n            id: 'stickman',\n            title: 'StickMan',\n            icon: 'desktop/assets/images/icons/icon_stickman_64.webp',\n            x: 300,\n            y: 100,\n            width: 700,\n            height: 520,\n            content,\n            parent: $('#desktop')[0],\n            resizable: true,\n            maximizable: true,\n            closable: true,\n            onClose: () => {\n                this.win = null; // Clear reference on close\n                if (this.video && this.video.srcObject) {\n                    this.video.srcObject.getTracks().forEach(track => track.stop());\n                    this.video.srcObject = null;\n                }\n            }\n        };\n    }\n\n    isWaveGesture(landmarks) {\n        // Wave: Both wrists above shoulders\n        const leftWrist = landmarks[15]; // Left wrist\n        const rightWrist = landmarks[16]; // Right wrist\n        const leftShoulder = landmarks[11]; // Left shoulder\n        const rightShoulder = landmarks[12]; // Right shoulder\n        return leftWrist.y < leftShoulder.y && rightWrist.y < rightShoulder.y;\n    }\n\n    async startStickMan() {\n        this.video = document.getElementById('stickman-video');\n        const canvas = document.getElementById('stickman-canvas');\n        const ctx = canvas.getContext('2d');\n        const status = document.getElementById('status');\n\n        let latestLandmarks = null; // 👈 cache the latest pose\n\n        document.addEventListener('keydown', (e) => {\n            switch (e.key.toLowerCase()) {\n                case 'b':\n                    this.backgroundColor = `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`;\n                    status.innerText = `🧍 StickMan | B: Change Background, R: Reset`;\n                    break;\n                /*\n                case 'r':\n                    this.waveCount = 0;\n                    this.isSpinning = false;\n                    this.spinAngle = 0;\n                    status.innerText = `🧍 StickMan | Waves: ${this.waveCount} | B: Change Background, R: Reset`;\n                    break;\n                */\n            }\n        });\n\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n        this.video.srcObject = stream;\n        await new Promise(resolve => (this.video.onloadeddata = resolve));\n        this.video.play();\n\n        const pose = new Pose({\n            locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`\n        });\n\n        pose.setOptions({\n            modelComplexity: 1,\n            smoothLandmarks: true,\n            minDetectionConfidence: 0.7,\n            minTrackingConfidence: 0.7,\n            selfieMode: true // Add this to flip landmarks for mirrored cameras\n\n        });\n\n        const camera = new Camera(this.video, {\n            onFrame: async () => await pose.send({ image: this.video }),\n            width: 640,\n            height: 480,\n        });\n        camera.start();\n\n\n        let firstResults = false;\n\n        pose.onResults((results) => {\n\n            if (!firstResults) {\n                firstResults = true;\n                $('.stickman-loading', this.win.content).fadeOut(300);\n            }\n\n\n\n            if (!results.poseLandmarks) {\n                latestLandmarks = null;\n                return;\n            }\n            latestLandmarks = results.poseLandmarks;\n        });\n\n        const drawPuppet = (landmarks) => {\n            const width = canvas.width;\n            const height = canvas.height;\n\n            // Map landmarks\n            const map = i => ({ x: landmarks[i].x * width, y: landmarks[i].y * height });\n            const leftShoulder = map(11), rightShoulder = map(12);\n            const leftElbow = map(13), rightElbow = map(14);\n            const leftWrist = map(15), rightWrist = map(16);\n            const leftHip = map(23), rightHip = map(24);\n            const leftKnee = map(25), rightKnee = map(26);\n            const leftAnkle = map(27), rightAnkle = map(28);\n\n            const centerX = (leftHip.x + rightHip.x) / 2;\n            const centerY = (leftHip.y + rightHip.y) / 2;\n            const shoulderMid = { x: (leftShoulder.x + rightShoulder.x) / 2, y: (leftShoulder.y + rightShoulder.y) / 2 };\n\n            ctx.strokeStyle = 'white';\n            ctx.lineWidth = 4;\n            ctx.fillStyle = 'white';\n\n            ctx.beginPath();\n            ctx.moveTo(shoulderMid.x, shoulderMid.y);\n            ctx.lineTo(centerX, centerY);\n            ctx.stroke();\n\n            const drawLimb = (a, b, c) => {\n                ctx.beginPath();\n                ctx.moveTo(a.x, a.y);\n                ctx.lineTo(b.x, b.y);\n                ctx.lineTo(c.x, c.y);\n                ctx.stroke();\n            };\n\n            drawLimb(leftShoulder, leftElbow, leftWrist);\n            drawLimb(rightShoulder, rightElbow, rightWrist);\n            drawLimb(leftHip, leftKnee, leftAnkle);\n            drawLimb(rightHip, rightKnee, rightAnkle);\n\n            // Head\n            ctx.beginPath();\n            ctx.arc(shoulderMid.x, shoulderMid.y - 30, 20, 0, 2 * Math.PI);\n            ctx.fill();\n\n            // Joints\n            [leftShoulder, rightShoulder, leftElbow, rightElbow, leftWrist, rightWrist, leftHip, rightHip, leftKnee, rightKnee, leftAnkle, rightAnkle].forEach(joint => {\n                ctx.beginPath();\n                ctx.arc(joint.x, joint.y, 5, 0, 2 * Math.PI);\n                ctx.fill();\n            });\n\n            /*\n            if (this.isWaveGesture(landmarks)) {\n                this.waveCount++;\n                this.isSpinning = true;\n                status.innerText = `🧍 StickMan | B: Change Background, R: Reset`;\n            }\n            */\n        };\n\n        const renderLoop = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.fillStyle = this.backgroundColor;\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n            if (latestLandmarks) {\n                drawPuppet(latestLandmarks);\n            } else {\n                status.innerText = `🧍 StickMan | B: Change Background`;\n            }\n\n            requestAnimationFrame(renderLoop);\n        };\n\n        requestAnimationFrame(renderLoop);\n    }\n\n}\n\nStickMan.prototype.startLoadingSequence = startLoadingSequence;","export default function startLoadingSequence(win) {\n    const steps = [\n        \"Initializing camera...\",\n        \"Loading vision model...\",\n        \"Warming up tensors...\",\n        \"Calibrating hand gestures...\",\n        \"Initializing Sticks...\",\n        \"Finalizing setup...\"\n    ];\n\n    let stepIndex = 0;\n    const $loadingText = $('#loading-text', this.win.content);\n\n    const interval = setInterval(() => {\n        $loadingText.text(steps[stepIndex]);\n        stepIndex++;\n\n        // End of steps — stop interval\n        if (stepIndex >= steps.length) {\n            clearInterval(interval);\n        }\n    }, 1200); // Change step every 1.2s\n}\n"],"names":["StickMan","constructor","bp","options","this","waveCount","isSpinning","spinAngle","backgroundColor","init","appendScript","html","load","appendCSS","open","window","discordView","win","restore","focus","startLoadingSequence","startStickMan","maximize","alert","title","id","icon","x","y","width","height","content","parent","$","resizable","maximizable","closable","onClose","video","srcObject","getTracks","forEach","track","stop","isWaveGesture","landmarks","leftWrist","rightWrist","leftShoulder","rightShoulder","document","getElementById","canvas","ctx","getContext","status","latestLandmarks","addEventListener","e","key","toLowerCase","Math","random","innerText","stream","navigator","mediaDevices","getUserMedia","Promise","resolve","onloadeddata","play","pose","Pose","locateFile","file","setOptions","modelComplexity","smoothLandmarks","minDetectionConfidence","minTrackingConfidence","selfieMode","Camera","onFrame","async","send","image","start","firstResults","onResults","results","fadeOut","poseLandmarks","renderLoop","clearRect","fillStyle","fillRect","map","i","leftElbow","rightElbow","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle","centerX","centerY","shoulderMid","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","drawLimb","a","b","c","arc","PI","fill","joint","drawPuppet","requestAnimationFrame","prototype","steps","stepIndex","$loadingText","interval","setInterval","text","length","clearInterval"],"mappings":"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"}