class t{constructor(t,e={}){return this.bp=t,this.options=e,this}async init(){return"loaded MiniPaint"}async open(t={}){return t.src&&(this.src=t.src),console.log("MiniPaint opened with options:",t),t.output?this.output=t.output:this.output="localhost",t.context?this.context=t.context:this.context="file-system",this.win=this.bp.window(this.window()),this.broadcastChannel(),this.win}broadcastChannel(){this.reciever=new BroadcastChannel("buddypond-minipaint"),this.bc=new BroadcastChannel("buddypond-desktop"),this.bc.onmessage=async t=>{if(t.data.app,"minipaint"===t.data.app&&"save"===t.data.action){console.log("BroadcastChannel save action received",t.data);let e=t.data.image,i=t.data.fileName||buddypond.generateSafeFilename("png"),n=`paints/${i}`;function o(t,e,i){return fetch(t).then((function(t){return t.arrayBuffer()})).then((function(t){return new File([t],e,{type:i})}))}o(e,i,"image/png").then((async t=>{if(t.filePath=n,console.log("File created:",t,t instanceof File),document.createElement("img"),!this.context||!this.output){console.warn("No context or output specified, saving file locally.");let e=document.createElement("a");return e.href=URL.createObjectURL(t),e.download=i,document.body.appendChild(e),e.click(),void document.body.removeChild(e)}let e=t=>{console.log(`Upload progress: ${t}%`)};try{let i=await buddypond.uploadFile(t,e);console.log("Upload successful:",i);let n={to:this.context,from:bp.me,type:this.output,text:i};console.log("sending multimedia message",n),bp.emit("buddy::sendMessage",n),this.close()}catch(t){console.error("Upload failed:",t)}}))}}}window(){let t="/v5/apps/based/minipaint/vendor/minipaint.html";return this.src&&(t+="?image="+encodeURI(this.src)),t+=(this.src?"&":"?")+"context="+encodeURI(this.context)+"&output="+encodeURI(this.output),{id:"minipaint",title:"miniPaint",icon:"desktop/assets/images/icons/icon_minipaint_64.png",x:250,y:75,width:800,height:600,parent:$("#desktop")[0],iframeContent:t,resizable:!0,minimizable:!0,maximizable:!0,closable:!0,focusable:!0,maximized:!1,minimized:!1,onClose:()=>{this.bc&&(this.bc.close(),this.bc=null),this.reciever&&(this.reciever.close(),this.reciever=null),this.win=null,this.src=null,this.output=null,this.context=null,console.log("MiniPaint window closed")}}}close(){this.win&&(this.win.close(),this.win=null)}}export{t as default};
//# sourceMappingURL=minipaint.js.map
