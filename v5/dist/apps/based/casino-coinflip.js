const t={};t.endpoint=buddypond.gamblorEndpoint,t.apiRequest=async(e,n="GET",i=null)=>{const o={method:n};let s={Accept:"application/json","Content-Type":"application/json; charset=utf-8","X-Me":buddypond.me};buddypond.qtokenid&&(s.Authorization=`Bearer ${buddypond.qtokenid}`),i&&(o.body=JSON.stringify(i)),o.headers=s;let a=`${t.endpoint}${e}`;console.log("admin client making api request",a,o);try{const t=await fetch(a,o);return t.ok,await t.json()}catch(t){throw console.error("Error in API request:",t),t}};class e{constructor(t,e={}){return this.bp=t,this.options=e,this}async init(){return this.html=await this.bp.load("/v5/apps/based/casino-coinflip/casino-coinflip.html"),await this.bp.load("/v5/apps/based/casino-coinflip/casino-coinflip.css"),"loaded casino-coinflip"}async open(t={}){if(this.win||(this.win=await this.bp.window(this.window()),this.eventBind(t)),this.renderBettingHistory(),t.context&&"default"!==t.context){let e=await this.client.apiRequest(`/bet/${t.context}`,"GET");console.log("Loaded bet for context:",e),e&&this.renderBet(e)}else $(".coinflip-form",this.win.content).show(),$(".coinflip-loaded-bet",this.win.content).hide();return $(".coinflip-max-participants",this.win.content).hide(),this.updateBalance(),this.bp.qtokenid?($(".loggedIn",this.win.content).show(),$(".loggedOut",this.win.content).hide()):($(".loggedIn",this.win.content).hide(),$(".loggedOut",this.win.content).show()),this.win}window(){return{id:"casino-coinflip",title:"Coin Flip",icon:"desktop/assets/images/icons/icon_coinflip_64.png",position:"center",parent:$("#desktop")[0],width:850,height:520,content:this.html,resizable:!0,closable:!0,onClose:()=>{this.win=null}}}}e.prototype.updateBalance=async function(){let t=$(".coin-balance",this.win.content),e="GBP";await this.bp.load("portfolio");const n=await this.bp.apps.portfolio.resource.search(this.bp.me,{owner:this.bp.me});console.log("assetsassetsassets",e,n.results),n.results.forEach((n=>{if(console.log(`asset.symbol: ${n.symbol} === currentCoin: ${e}`,n),$("#coin-send-name",this.win.content).append(`<option value="${n.symbol}">${n.symbol}</option>`),n.symbol===e){let e=n.amount;e=e.toLocaleString("en-US",{minimumFractionDigits:0,maximumFractionDigits:0}),t.text(e+" "+n.symbol),this.bp.emit("buddylist-websocket::reward",{success:!0,message:{newBalance:n.amount,symbol:n.symbol}})}}))},e.prototype.client=t,e.prototype.eventBind=function(t){$("#coinflip-group-bet",this.win.content).on("change",(t=>{$(t.target).is(":checked")?$(".coinflip-max-participants",this.win.content).show():$(".coinflip-max-participants",this.win.content).hide()})),$(".coinflip-form",this.win.content).on("submit",(async t=>{t.preventDefault();const e=$(t.originalEvent.submitter).data("side"),n=parseFloat($("#coinflip-amount",this.win.content).val()),i=$("#coinflip-group-bet",this.win.content).is(":checked")?parseInt($("#coinflip-max-participants",this.win.content).val(),10)||2:1;let o;if(console.log("betAmount",n,"betSide",e,"betCurrency","GBP"),isNaN(n)||n<=0)alert("Please enter a valid bet amount.");else if(e)if($(".coinflip-error",this.win.content).hide().text(""),this.bp.qtokenid){try{o=await this.client.apiRequest("/bet","POST",{type:"coinflip",owner:this.bp.me,bet:e,symbol:"GBP",amount:n,max_participants:i,seed:`seed-${this.bp.me}-1234`}),o.error&&(console.log("Error creating bet:",o.error),$(".coinflip-error",this.win.content).text(o.error||"An error occurred while creating the bet.").show())}catch(t){return console.log("Error creating bet:",t),void $(".coinflip-error",this.win.content).text(t.message||"An error occurred while creating the bet.").show()}console.log("created bet",o),$(".coinflip-result-data",this.win.content).text(JSON.stringify(o,null,2)),$(".coinflip-result",this.win.content).show(),$(".coinflip-link",this.win.content).attr("href",`https://${window.location.host}/app/coinflip?context=${o.betId}`),this.updateBalance(),this.renderBettingHistory()}else $(".coinflip-error",this.win.content).text("You must be logged in to place a bet.").show();else alert("Please select a side to bet on.")})),$(".prev-page",this.win.content).on("click",(()=>{const t=$(".pagination-controls").data("current-page");t>1&&this.renderBettingHistory(t-1)})),$(".next-page",this.win.content).on("click",(()=>{const t=$(".pagination-controls").data("current-page");this.renderBettingHistory(t+1)}))},e.prototype.renderBet=function(t){$(".coinflip-form",this.win.content).hide(),$(".coinflip-loaded-bet",this.win.content).show(),$(".coinflip-status",this.win.content).text(t.bet.status),$(".coinflip-owner",this.win.content).text(t.bet.owner),$(".coinflip-amount-display",this.win.content).text(`${t.bet.amount} ${t.bet.symbol}`),$(".coinflip-max-display",this.win.content).text(t.bet.max_participants||"2");let e=new Date(t.bet.ctime).toLocaleString();$(".coinflip-created-at",this.win.content).text(`${e}`);let n=t.participants.find((t=>t.buddy===this.bp.me));n?$(".coinflip-your-side",this.win.content).text(`${n.bet}`):$(".coinflip-your-side",this.win.content).text("You are not a participant in this bet."),console.log("bbbbbb",t.bet.result);let i={};if(t.bet.result)try{i=JSON.parse(t.bet.result)}catch(t){console.error("Error parsing bet result JSON:",t)}if($(".coinflip-prove",this.win.content).off("click").on("click",(()=>{this.bp.open("ramblor",{roll:i.ramblorResult})})),console.log("betJSON",i),"complete"===t.bet.status){if($(".coinflip-winning-side",this.win.content).text(`${i.result}`),$(".coinflip-result-date",this.win.content).text(`Resolved at: ${new Date(i.result.resolved_at).toLocaleString()}`),t.result.winners&&Array.isArray(t.result.winners)){let e=t.result.winners.find((t=>t.buddy===this.bp.me));e&&$(".coinflip-won-amount",this.win.content).text(`You won ${e.amount_won} ${t.bet.symbol}!`)}}else $(".coinflip-winning-side",this.win.content).text("Winning side: N/A"),$(".coinflip-result-date",this.win.content).text("Resolved at: N/A"),$(".coinflip-won-amount",this.win.content).text("You have not won anything yet.");const o=$(".coinflip-participants-list",this.win.content).empty();t.participants.forEach((t=>{o.append(`<li>${t.buddy} - ${t.bet}</li>`)})),"open"===t.bet.status?($(".coinflip-join-button",this.win.content).show(),$(".coinflip-cancel-button",this.win.content).show()):($(".coinflip-join-button",this.win.content).hide(),$(".coinflip-cancel-button",this.win.content).hide()),$(".coinflip-join-button",this.win.content).off("click").on("click",(async()=>{let e=prompt("Choose your side (heads/tails):");if("heads"!==e&&"tails"!==e)return void alert("Invalid side selected.");let n=await this.client.apiRequest(`/join-bet/${t.bet.id}`,"POST",{betId:t.bet.id,buddy:this.bp.me,amount:t.bet.amount,seed:"random-join-seed-"+Date.now(),bet:e});alert(n.success?"Joined bet!":"Failed to join."),this.win.close()})),$(".coinflip-cancel-button",this.win.content).off("click").on("click",(async()=>{if(!confirm("Are you sure you want to cancel this bet?"))return;let e=await this.client.apiRequest(`/cancel-bet/${t.bet.id}`,"POST");alert(e.success?"Bet cancelled.":"Failed to cancel."),this.win.close()}))},e.prototype.renderBettingHistory=async function(t=1){let e=await this.client.apiRequest(`/bets?owner=${this.bp.me}&type=coinflip&page=${t}&limit=8`,"GET");console.log("api response for previous bets:",e);let n=e.results||[],i=e.pagination||{page:1,totalPages:1};console.log("Loaded previous bets:",n);const o=$(".coinflip-previous-bets-list",this.win.content).empty();0===n.length?o.append('<span class="no-bets">No previous bets found.</span>'):(n.forEach((t=>{const e=`https://${window.location.host}/app/coinflip?context=${t.id}`;let n={};if(t.result)try{n=JSON.parse(t.result)}catch(t){console.error("Error parsing bet result JSON:",t)}let i=!1;Array.isArray(n.winners)&&n.winners.some((t=>t.buddy===this.bp.me))&&(i=!0);let s=n.result||"-",a="";a="complete"===t.status?i?'<span style="color:#4CAF50;font-weight:bold;">You Won!</span>':'<span style="color:#F44336;font-weight:bold;">You Lost</span>':'<span style="color:#999;">Pending</span>';let c=`${t.amount} ${t.symbol}`,l=new Date(t.ctime).toLocaleString();o.append(`\n        <li class="bet-row">\n          <span class="col-outcome">${s}</span>\n          <span class="col-result">${a}</span>\n          <span class="col-amount">${c}</span>\n          <span class="col-date"><a href="${e}" target="#" class="open-app" data-app="casino-coinflip" data-context="${t.id}">${l}</a></span>\n        </li>\n      `)})),console.log("pagination",i),$(".page-info").text(`Page ${i.page} of ${i.totalPages}`),$(".prev-page").prop("disabled",i.page<=1),$(".next-page").prop("disabled",i.page>=i.totalPages),$(".pagination-controls").data("current-page",i.page))};export{e as default};
//# sourceMappingURL=casino-coinflip.js.map
