{"version":3,"file":"jutsu-caster.js","sources":["../../../apps/based/jutsu-caster/jutsu-caster.js"],"sourcesContent":["export default class JutsuCaster {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n        this.showDots = true; // <-- add this to constructor or init\n\n        return this;\n    }\n\n    async init() {\n\n        await this.bp.appendScript('https://cdn.jsdelivr.net/npm/@tensorflow/tfjs');\n        await this.bp.appendScript('https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd');\n        await this.bp.appendScript('https://cdn.jsdelivr.net/npm/@mediapipe/holistic');\n        await this.bp.appendScript('https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils');\n        await this.bp.appendScript('https://cdn.jsdelivr.net/npm/@mediapipe/hands');\n\n        await this.bp.load('spellbook');\n\n        // TODO: add loading image while we wait for camera to start\n        // desktop/assets/images/gui/rainbow-tv-loading.gif'\n\n        // not needed?\n        // await this.bp.appendScript('https://cdn.jsdelivr.net/npm/@tensorflow-models/hand-pose-detection');\n        //await this.bp.appendScript('https://cdn.jsdelivr.net/npm/@mediapipe/hands@0.4.1646424915/hands.min.js');\n        await this.bp.appendScript('https://cdn.jsdelivr.net/npm/fingerpose/dist/fingerpose.min.js');\n\n        await this.bp.appendCSS('/v5/apps/based/jutsu-caster/jutsu-caster.css');\n\n        this.html = await this.bp.load('/v5/apps/based/jutsu-caster/jutsu-caster.html');\n\n        this.spellMap = {\n            'victory-thumbs_up': {\n                gestures: '✌️👍',\n                spell: 'fireball',\n                jutsu: 'fireball',\n                type: 'jutsu',\n                emoji: '🔥',\n                label: '🔥 Fireball 🔥',\n            },\n            // thumbs up + thumbs down = barrelroll\n            'thumbs_up-thumbs_down': {\n                gestures: '👍👎',\n                spell: 'barrelRoll',\n                jutsu: 'barrelRoll',\n                type: 'jutsu',\n                emoji: '🌀',\n                label: '🌀 Barrel Roll 🌀',\n            },\n            'thumbs_down-thumbs_up': {\n                // use emoji symbols in gestures field\n                gestures: '👎👍',\n                spell: 'barrelRoll',\n                jutsu: 'barrelRoll',\n                type: 'jutsu',\n                emoji: '🌀',\n                label: '🌀 Barrel Roll 🌀',\n            },\n            // left point + right point = lightning\n            'point_right-point_left': {\n                gestures: '👉👈',\n                spell: 'lightning',\n                jutsu: 'lightning',\n                type: 'jutsu',\n                emoji: '⚡',\n                label: '⚡ Lightning ⚡',\n            },\n            'point_left-point_right': {\n                gestures: '👈👉',\n                spell: 'lightning',\n                jutsu: 'lightning',\n                type: 'jutsu',\n                emoji: '⚡',\n                label: '⚡ Lightning ⚡',\n            },\n\n            // two open palms is earthquake\n            'open_palm-open_palm': {\n                gestures: '👐👐',\n                spell: 'earthquake',\n                jutsu: 'earthquake',\n                type: 'jutsu',\n                emoji: '🌍',\n                label: '🌍 Earthquake 🌍'\n            },\n            // flood spell\n            'hang_loose-hang_loose': {\n                gestures: '🤙🤙',\n                spell: 'flood',\n                jutsu: 'flood',\n                type: 'jutsu',\n                emoji: '🌊',\n                label: '🌊 Flood 🌊'\n            },\n            // vortex spell\n            'devil_horns-devil_horns': {\n                gestures: '🤘🤘',\n                spell: 'vortex',\n                jutsu: 'vortex',\n                type: 'jutsu',\n                emoji: '🌪️',\n                label: '🌪️ Vortex 🌪️'\n            },\n            /*\n            'ArmsCrossed': {\n                gestures: '🙅‍♀️',\n                spell: 'lightning',\n                jutsu: 'lightning',\n                type: 'jutsu',\n                emoji: '⚡',\n                label: '⚡ Lightning ⚡',\n            }\n            */\n\n            // Add more spells here!\n        };\n\n        console.log(fp.Gestures)\n        const { Finger, FingerCurl, FingerDirection, GestureDescription } = fp;\n\n        const fistGesture = new GestureDescription('fist_thumb_in');\n        for (let finger of Finger.all) {\n            fistGesture.addCurl(finger, FingerCurl.FullCurl, 1.0);\n        }\n\n        const openPalmGesture = new fp.GestureDescription('open_palm');\n\n        // All fingers extended and vertical\n        for (let finger of fp.Finger.all) {\n            openPalmGesture.addCurl(finger, fp.FingerCurl.NoCurl, 1.0);\n            openPalmGesture.addDirection(finger, fp.FingerDirection.VerticalUp, 0.9);\n        }\n\n        // Optional: Suggest finger spread (for added realism if your detector supports it)\n        openPalmGesture.addDirection(fp.Finger.Index, fp.FingerDirection.DiagonalUpLeft, 0.5);\n        openPalmGesture.addDirection(fp.Finger.Pinky, fp.FingerDirection.DiagonalUpRight, 0.5);\n\n\n        // 🖖 Boar Seal – Spock hand, index/middle separated from ring/pinky\n        /*\n        const boarSealGesture = new fp.GestureDescription('boar_seal');\n        boarSealGesture.addCurl(fp.Finger.Thumb, fp.FingerCurl.NoCurl, 1.0);\n        boarSealGesture.addCurl(fp.Finger.Index, fp.FingerCurl.NoCurl, 1.0);\n        boarSealGesture.addCurl(fp.Finger.Middle, fp.FingerCurl.NoCurl, 1.0);\n        boarSealGesture.addCurl(fp.Finger.Ring, fp.FingerCurl.NoCurl, 1.0);\n        boarSealGesture.addCurl(fp.Finger.Pinky, fp.FingerCurl.NoCurl, 1.0);\n        // Differentiate with direction: index/middle vs. ring/pinky form a \"V\"\n        boarSealGesture.addDirection(fp.Finger.Index, fp.FingerDirection.DiagonalUpLeft, 0.9);\n        boarSealGesture.addDirection(fp.Finger.Middle, fp.FingerDirection.DiagonalUpLeft, 0.9);\n        boarSealGesture.addDirection(fp.Finger.Ring, fp.FingerDirection.DiagonalUpRight, 0.9);\n        boarSealGesture.addDirection(fp.Finger.Pinky, fp.FingerDirection.DiagonalUpRight, 0.9);\n        boarSealGesture.addDirection(fp.Finger.Thumb, fp.FingerDirection.HorizontalLeft, 0.8); // Thumb often extends outward\n        */\n\n        // 🤞 \"Bird Seal\" – middle over index\n        /*\n        const birdSealGesture = new GestureDescription('bird_seal');\n        birdSealGesture.addCurl(Finger.Index, FingerCurl.NoCurl, 1.0);\n        birdSealGesture.addCurl(Finger.Middle, FingerCurl.NoCurl, 1.0);\n        birdSealGesture.addCurl(Finger.Ring, FingerCurl.FullCurl, 1.0);\n        birdSealGesture.addCurl(Finger.Pinky, FingerCurl.FullCurl, 1.0);\n        birdSealGesture.addCurl(Finger.Thumb, FingerCurl.HalfCurl, 0.5);\n        */\n\n\n        const pointUpGesture = new GestureDescription('point_up');\n        pointUpGesture.addCurl(Finger.Index, FingerCurl.NoCurl, 1.0);\n        pointUpGesture.addDirection(Finger.Index, FingerDirection.VerticalUp, 1.0);\n        [Finger.Thumb, Finger.Middle, Finger.Ring, Finger.Pinky].forEach(finger => {\n            pointUpGesture.addCurl(finger, FingerCurl.FullCurl, 1.0);\n        });\n\n\n        // describe hang loose gesture 🤙\n        const hangLooseGesture = new GestureDescription('hang_loose');\n\n        // thumb:\n        // - curl: none (must)\n        // - direction vertical up (best)\n        // - direction diagonal up left / right (acceptable)\n        hangLooseGesture.addCurl(Finger.Thumb, FingerCurl.NoCurl, 1.0);\n        hangLooseGesture.addCurl(Finger.Pinky, FingerCurl.NoCurl, 1.0);\n        hangLooseGesture.addDirection(Finger.Thumb, FingerDirection.VerticalUp, 1.0);\n        hangLooseGesture.addDirection(Finger.Thumb, FingerDirection.DiagonalUpLeft, 0.9);\n        hangLooseGesture.addDirection(Finger.Thumb, FingerDirection.DiagonalUpRight, 0.9);\n\n        // all other fingers:\n        // - curled (best)\n        // - half curled (acceptable)\n        // - pointing down is NOT acceptable\n        for (let finger of [Finger.Index, Finger.Middle, Finger.Ring]) {\n            hangLooseGesture.addCurl(finger, FingerCurl.FullCurl, 1.0);\n            hangLooseGesture.addCurl(finger, FingerCurl.HalfCurl, 0.9);\n        }\n\n\n        const thumbsDownGesture = new GestureDescription('thumbs_down');\n\n        // Thumb: no curl, pointing down\n        thumbsDownGesture.addCurl(Finger.Thumb, FingerCurl.NoCurl, 1.0);\n        thumbsDownGesture.addDirection(Finger.Thumb, FingerDirection.VerticalDown, 1.0);\n        thumbsDownGesture.addDirection(Finger.Thumb, FingerDirection.DiagonalDownLeft, 0.9);\n        thumbsDownGesture.addDirection(Finger.Thumb, FingerDirection.DiagonalDownRight, 0.9);\n\n        // All other fingers: curled\n        for (let finger of [Finger.Index, Finger.Middle, Finger.Ring, Finger.Pinky]) {\n            thumbsDownGesture.addCurl(finger, FingerCurl.FullCurl, 1.0);\n            thumbsDownGesture.addCurl(finger, FingerCurl.HalfCurl, 0.9);\n        }\n\n        const tightVictoryGesture = new GestureDescription('tight_victory');\n\n        // Index & middle fingers: no curl, same upward direction\n        for (let finger of [Finger.Index, Finger.Middle]) {\n            tightVictoryGesture.addCurl(finger, FingerCurl.NoCurl, 1.0);\n            tightVictoryGesture.addDirection(finger, FingerDirection.VerticalUp, 1.0);\n            tightVictoryGesture.addDirection(finger, FingerDirection.DiagonalUpLeft, 0.9);\n            tightVictoryGesture.addDirection(finger, FingerDirection.DiagonalUpRight, 0.9);\n        }\n\n        // Remaining fingers: curled\n        for (let finger of [Finger.Ring, Finger.Pinky]) {\n            tightVictoryGesture.addCurl(finger, FingerCurl.FullCurl, 1.0);\n        }\n\n        tightVictoryGesture.addCurl(Finger.Thumb, FingerCurl.HalfCurl, 0.9);\n\n        const okayGesture = new GestureDescription('okay');\n        // Thumb: Half curl (touching index)\n        okayGesture.addCurl(Finger.Thumb, FingerCurl.HalfCurl, 1.0);\n        // Index: Half curl (touching thumb)\n        okayGesture.addCurl(Finger.Index, FingerCurl.HalfCurl, 1.0);\n        // Middle, Ring, Pinky: No curl (extended)\n        [Finger.Middle, Finger.Ring, Finger.Pinky].forEach(finger => {\n            okayGesture.addCurl(finger, FingerCurl.NoCurl, 1.0);\n        });\n\n        const pointGesture = new GestureDescription('point');\n        pointGesture.addCurl(Finger.Index, FingerCurl.NoCurl, 1.0);\n        [Finger.Thumb, Finger.Middle, Finger.Ring, Finger.Pinky].forEach(finger => {\n            pointGesture.addCurl(finger, FingerCurl.FullCurl, 1.0);\n            pointGesture.addCurl(finger, FingerCurl.HalfCurl, 0.9);\n        });\n\n        const devilHornsGesture = new GestureDescription('devil_horns');\n\n        // Index & pinky: extended\n        [Finger.Index, Finger.Pinky].forEach(finger => {\n            devilHornsGesture.addCurl(finger, FingerCurl.NoCurl, 1.0);\n        });\n\n        // Middle & ring: curled\n        [Finger.Middle, Finger.Ring].forEach(finger => {\n            devilHornsGesture.addCurl(finger, FingerCurl.FullCurl, 1.0);\n            devilHornsGesture.addCurl(finger, FingerCurl.HalfCurl, 0.9);\n        });\n\n        // Thumb: either half curled or extended\n        devilHornsGesture.addCurl(Finger.Thumb, FingerCurl.NoCurl, 0.9);\n        devilHornsGesture.addCurl(Finger.Thumb, FingerCurl.HalfCurl, 1.0);\n\n\n        // 🧠 Setup in your init\n        this.GE = new fp.GestureEstimator([\n            fp.Gestures.VictoryGesture,\n            fp.Gestures.ThumbsUpGesture,\n            fistGesture,\n            //birdSealGesture,\n            pointUpGesture,\n            openPalmGesture,\n            // boarSealGesture,\n            hangLooseGesture,\n            thumbsDownGesture,\n            tightVictoryGesture,\n            okayGesture,\n            devilHornsGesture,\n            pointGesture\n        ]);\n\n        /*\n\n                    'bird_seal': '🐦',\n            'boar_seal': '🐗',\n*/\n\n        this.gestureEmoji = {\n            'victory': '✌️',\n            'thumbs_up': '👍',\n            'fist_left': '🤛',\n            'fist_right': '🤜',\n            'point_up': '☝️',\n            'open_palm': '🖐️',\n            'hang_loose': '🤙',\n            'thumbs_down': '👎',\n            'tight_victory': '🤞',\n            'okay': '👌',\n            'devil_horns': '🤘',\n            'point_left': '👈',\n            'point_right': '👉'\n        };\n\n        this.jutsuQueue = [];\n        //         this.jutsuQueue = { left: [], right: [] }; // Separate queues for left and right hands\n\n        this.lastGestureTime = Date.now();\n\n        this.hands = new Hands({\n            locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`,\n        });\n\n        return 'loaded ComputerVision';\n    }\n\n    async open() {\n\n        if (window.discordView) {\n            this.bp.alert(`The Jutsu Caster is a camera assisted computer-vision app and is not available in Discord Activities.<br/>Please visit <a target=\"_blank\" href=\"https://buddypond.com/app/basketball\">BuddyPond</a> to use the Jutsu Caster.`, {\n                title: 'Sorry!'\n            });\n            return;\n        }\n\n\n        if (this.win) {\n            this.win.focus();\n            return this.win;\n        }\n\n        this.win = this.bp.window(this.window());\n\n        document.getElementById('toggle-dots-btn').onclick = () => {\n            this.showDots = !this.showDots;\n            $('.spell-guide', this.win.content).toggle();\n        };\n\n        this.renderSpellGuide(this.spellMap); // Call this on init\n\n\n        function startFakeLoadingSequence() {\n            const steps = [\n                \"Initializing camera...\",\n                \"Loading vision model...\",\n                \"Warming up tensors...\",\n                \"Calibrating hand gestures...\",\n                \"Syncing overlays...\",\n                \"Finalizing setup...\"\n            ];\n\n            let stepIndex = 0;\n            const $loadingText = $('#loading-text', this.win.content);\n\n            const interval = setInterval(() => {\n                $loadingText.text(steps[stepIndex]);\n                stepIndex++;\n\n                // End of steps — stop interval\n                if (stepIndex >= steps.length) {\n                    clearInterval(interval);\n                }\n            }, 1200); // Change step every 1.2s\n        }\n        startFakeLoadingSequence.call(this);\n\n        this.startObjectDetection();\n        this.win.maximize();\n        return this.win;\n    }\n\n    window() {\n\n        return {\n            id: 'jutsu-caster',\n            title: 'Jutsu Caster',\n            icon: 'desktop/assets/images/icons/icon_jutsu_64.png',\n            x: 250,\n            y: 75,\n            width: 600, // Increased width for two-column layout\n            height: 400,\n            minWidth: 400,\n            minHeight: 300,\n            parent: $('#desktop')[0],\n            content: this.html,\n            // iframeContent: 'https://plays.org/game/doodle-jump-extra/',\n            //iframeContent: iframeUrl,\n            resizable: true,\n            minimizable: true,\n            maximizable: true,\n            closable: true,\n            focusable: true,\n            maximized: false,\n            minimized: false,\n            onClose: () => {\n                this.win = null; // Clear reference on close\n                // close the camera\n                this.video.srcObject.getTracks().forEach(track => track.stop());\n                this.video = null;\n            }\n        }\n    }\n\n    async startObjectDetection() {\n        const video = document.getElementById('video');\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // Load TensorFlow.js model\n        const model = await cocoSsd.load();\n\n        // Start webcam\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n        video.srcObject = stream;\n        this.video = video;\n\n        await new Promise((resolve) => {\n            video.onloadeddata = () => resolve();\n\n        });\n\n        video.play();\n        video.style.display = 'none';\n\n        // --- MediaPipe Holistic Setup ---\n        const holistic = new Holistic({\n            locateFile: (file) =>\n                `https://cdn.jsdelivr.net/npm/@mediapipe/holistic/${file}`,\n        });\n\n        holistic.setOptions({\n            modelComplexity: 1,\n            smoothLandmarks: true,\n            enableSegmentation: false,\n            refineFaceLandmarks: true,\n            minDetectionConfidence: 0.7,\n            minTrackingConfidence: 0.7,\n            selfieMode: true // Add this to flip landmarks for mirrored cameras\n        });\n\n        const hands = new Hands({\n            locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`,\n        });\n\n        hands.setOptions({\n            maxNumHands: 2,\n            modelComplexity: 1,\n            minDetectionConfidence: 0.85,\n            minTrackingConfidence: 0.85,\n            selfieMode: true,\n        });\n\n        this.previousGestures = {}; // Maps hand index => previous gesture name\n        this.lastGestureTimePerHand = {};      // hand index => timestamp (ms)\n\n        let foundFirstHandGesture = false;\n        let startTime = Date.now();\n\n        // create a default timer to hide instruction overlay after 7 seconds\n        setTimeout(() => {\n            if (!foundFirstHandGesture) {\n                $('.instruction-overlay', this.win.content).hide();\n                foundFirstHandGesture = true;\n            }\n        }, 10000);\n\n        hands.onResults(async (results) => {\n            const gestureTrailEl = document.getElementById('gesture-trail');\n            const gestureSpellEl = document.getElementById('gesture-spell');\n            const now = Date.now();\n\n            if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {\n\n                if (!foundFirstHandGesture) {\n                    let now = Date.now();\n                    // wait at least a few seconds before showing the overlay\n                    if (now - startTime > 7000) {\n                        $('.instruction-overlay', this.win.content).hide();\n                        foundFirstHandGesture = true;\n                    }\n                }\n\n                const allGestures = [];\n\n                // Reset if timeout\n                if (now - this.lastGestureTime > 5000) {\n                    this.jutsuQueue = [];\n                    gestureTrailEl.innerHTML = '';\n                    this.previousGestures = {};\n                    this.lastGestureTimePerHand = {};\n                }\n\n                for (let i = 0; i < results.multiHandLandmarks.length; i++) {\n                    const rawLandmarks = results.multiHandLandmarks[i];\n                    const landmarks = rawLandmarks.map(p => [p.x, p.y, p.z]);\n                    const est = this.GE.estimate(landmarks, 8.5);\n                    const handLabel = results.multiHandedness?.[i]?.label; // 'Left' or 'Right'\n\n\n                    if (est.gestures.length > 0) {\n                        const best = est.gestures.reduce((p, c) => (p.score > c.score ? p : c));\n                        let name = best.name;\n\n                        // If it's the 'point' gesture, specialize based on handedness\n                        if (name === 'point') {\n                            name = handLabel === 'Left' ? 'point_left' : 'point_right';\n                        }\n\n                        if (name === 'fist_thumb_in') {\n                            name = handLabel === 'Left' ? 'fist_left' : 'fist_right';\n                        }\n\n                        const emoji = this.gestureEmoji[name] || '❓';\n\n                        const lastName = this.previousGestures[i];\n                        const lastTime = this.lastGestureTimePerHand[i] || 0;\n\n                        // Only process gesture if it's new AND enough time has passed\n                        const gestureChanged = lastName !== name;\n                        const debouncePassed = now - lastTime > 500;\n\n                        if (gestureChanged && debouncePassed) {\n                            this.previousGestures[i] = name;\n                            this.lastGestureTimePerHand[i] = now;\n\n                            allGestures.push({ name, emoji });\n\n                            // UI update\n                            const span = document.createElement('span');\n                            span.textContent = emoji;\n                            span.style.marginRight = '6px';\n                            gestureTrailEl.prepend(span);\n\n                            while (gestureTrailEl.children.length > 10) {\n                                gestureTrailEl.removeChild(gestureTrailEl.lastChild);\n                            }\n\n                            console.log('[Hand Gesture]', name);\n                            this.jutsuQueue.push(name);\n                        }\n                    } else {\n                        // If no gesture is detected, clear state for that hand\n                        this.previousGestures[i] = null;\n                        this.lastGestureTimePerHand[i] = 0;\n                    }\n                }\n\n                this.lastGestureTime = now;\n\n                // Truncate to the last 2 gestures\n                if (this.jutsuQueue.length > 2) {\n                    this.jutsuQueue = this.jutsuQueue.slice(-2);\n                }\n\n                if (allGestures.length > 0) {\n                    // hide the first time a spell is cast\n                    let result = await this.handleJutsuCast(this.jutsuQueue, gestureSpellEl, this.bp);\n                    if (result && !foundFirstHandGesture) {\n                        $('.instruction-overlay', this.win.content).hide();\n                        foundFirstHandGesture = true;\n                    }\n\n\n                }\n            }\n        });\n\n\n        let firstResults = false\n\n        holistic.onResults((results) => {\n\n            if (!firstResults) {\n                $('#cv-loading', this.win.content).fadeOut(300);\n                // document.getElementById('cv-loading').style.display = 'none';\n                // $('#cv-loading').fadeOut(300);\n\n                // video.style.display = 'block';\n                firstResults = true;\n                $('.instruction-overlay', this.win.content).flexShow();\n            }\n\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.drawImage(results.image, 0, 0, canvas.width, canvas.height);\n\n\n\n\n            // Pose landmarks\n            if (this.showDots && results.poseLandmarks) {\n                for (const lm of results.poseLandmarks) {\n                    const x = lm.x * canvas.width;\n                    const y = lm.y * canvas.height;\n                    ctx.beginPath();\n                    ctx.arc(x, y, 4, 0, 2 * Math.PI);\n                    ctx.fillStyle = 'lime';\n                    ctx.fill();\n                }\n            }\n\n            // Face landmarks (draw fewer for performance)\n            if (this.showDots && results.faceLandmarks) {\n                for (let i = 0; i < results.faceLandmarks.length; i += 10) {\n                    const lm = results.faceLandmarks[i];\n                    const x = lm.x * canvas.width;\n                    const y = lm.y * canvas.height;\n                    ctx.beginPath();\n                    ctx.arc(x, y, 2, 0, 2 * Math.PI);\n                    ctx.fillStyle = 'yellow';\n                    ctx.fill();\n                }\n            }\n\n            // Hand landmarks\n            if (this.showDots && results.leftHandLandmarks) {\n                for (const lm of results.leftHandLandmarks) {\n                    const x = lm.x * canvas.width;\n                    const y = lm.y * canvas.height;\n                    ctx.beginPath();\n                    ctx.arc(x, y, 4, 0, 2 * Math.PI);\n                    ctx.fillStyle = 'cyan';\n                    ctx.fill();\n                }\n            }\n            if (this.showDots && results.rightHandLandmarks) {\n                for (const lm of results.rightHandLandmarks) {\n                    const x = lm.x * canvas.width;\n                    const y = lm.y * canvas.height;\n                    ctx.beginPath();\n                    ctx.arc(x, y, 4, 0, 2 * Math.PI);\n                    ctx.fillStyle = 'magenta';\n                    ctx.fill();\n                }\n            }\n\n\n            // --- Detect \"Arms Crossed\" Gesture ---\n            if (results.poseLandmarks) {\n                const lw = results.poseLandmarks[15]; // leftWrist\n                const rw = results.poseLandmarks[16]; // rightWrist\n                const ls = results.poseLandmarks[11]; // leftShoulder\n                const rs = results.poseLandmarks[12]; // rightShoulder\n\n                // 1. Check wrists are horizontally between the shoulders\n                const wristsBetweenShoulders =\n                    lw.x > rs.x && lw.x < ls.x &&\n                    rw.x > rs.x && rw.x < ls.x;\n\n                // 2. Check wrists are close to each other\n                const dx = lw.x - rw.x;\n                const dy = lw.y - rw.y;\n                const dist = Math.sqrt(dx * dx + dy * dy);\n                const wristsClose = dist < 0.15;\n\n                // 3. Check wrists are near same vertical level as shoulders\n                const avgShoulderY = (ls.y + rs.y) / 2;\n                const avgWristY = (lw.y + rw.y) / 2;\n                const wristsNearChest = Math.abs(avgWristY - avgShoulderY) < 0.15;\n\n                // Final gesture check\n                const armsCrossed = wristsClose && wristsBetweenShoulders && wristsNearChest;\n\n                // console.log('[Pose Gesture] ArmsCrossed:', armsCrossed);\n                // TODO: add more advanced jutsu like crossed arms, etc.\n                // Remark: The gesture works, we need better processing of jutsu pipelines\n                if (false && armsCrossed) {\n                    const gestureTrailEl = document.getElementById('gesture-trail');\n                    const gestureSpellEl = document.getElementById('gesture-spell');\n                    const now = Date.now();\n\n                    // Reset gesture queue if timed out\n                    if (now - this.lastGestureTime > 5000) {\n                        this.jutsuQueue = [];\n                        gestureTrailEl.innerHTML = '';\n                        this.previousGestures = {};\n                        this.lastGestureTimePerHand = {};\n                    }\n\n                    this.lastGestureTime = now;\n                    this.jutsuQueue.push('ArmsCrossed');\n\n                    // Add 🙅‍♀️ to gesture trail\n                    const skull = '🙅‍♀️';\n                    const span = document.createElement('span');\n                    span.textContent = skull;\n                    span.style.marginRight = '6px';\n                    gestureTrailEl.prepend(span);\n\n                    while (gestureTrailEl.children.length > 10) {\n                        gestureTrailEl.removeChild(gestureTrailEl.lastChild);\n                    }\n\n\n                    // Limit to last 2 jutsu signs\n                    if (this.jutsuQueue.length > 2) {\n                        this.jutsuQueue = this.jutsuQueue.slice(-2);\n                    }\n\n                    // Trigger jutsu\n                    this.handleJutsuCast(this.jutsuQueue, gestureSpellEl, this.bp);\n                }\n            }\n\n\n        });\n\n        // Use MediaPipe's camera helper to feed video frames\n        const camera = new Camera(video, {\n            onFrame: async () => {\n                // Resize canvas\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n\n                // Feed video to holistic model\n                await holistic.send({ image: video });\n                await hands.send({ image: video }); // Send to Hands pipeline\n\n                // Run object detection in parallel\n                const predictions = await model.detect(video);\n\n                const listEl = $('#object-list', this.win.content)[0];\n                listEl.innerHTML = '';\n\n                predictions.forEach((pred) => {\n                    const [x, y, width, height] = pred.bbox;\n\n                    if (this.showDots) {\n                        ctx.beginPath();\n                        ctx.rect(x, y, width, height);\n                        ctx.lineWidth = 2;\n                        ctx.strokeStyle = 'red';\n                        ctx.fillStyle = 'red';\n                        ctx.stroke();\n                        ctx.fillText(pred.class, x, y > 10 ? y - 5 : 10);\n\n                    }\n\n\n                    const li = document.createElement('li');\n                    li.textContent = `${pred.class} (${(pred.score * 100).toFixed(1)}%)`;\n                    listEl.appendChild(li);\n                });\n            },\n            width: 640,\n            height: 480,\n        });\n\n        camera.start();\n    }\n\n    async handleJutsuCast(jutsuQueue, gestureSpellEl) {\n        const key = jutsuQueue.join('-');\n        const spellMeta = this.spellMap[key];\n        if (!spellMeta) return;\n\n        console.log(`🔥 Jutsu Cast: ${spellMeta.jutsu.charAt(0).toUpperCase() + spellMeta.jutsu.slice(1)}!`);\n        gestureSpellEl.innerHTML = spellMeta.label;\n\n        try {\n            const spellModule = await this.bp.importModule(\n                `/v5/apps/based/spellbook/spells/${spellMeta.spell}/${spellMeta.spell}.js`, {}, false\n            );\n            spellModule.default.call(this);\n        } catch (error) {\n            console.error('Error importing spell module:', error);\n        }\n\n        jutsuQueue.length = 0; // clear queue in-place\n        setTimeout(() => {\n            gestureSpellEl.innerHTML = '';\n        }, 2200);\n        return true; // Indicate spell was cast\n    }\n\n    renderSpellGuide(spellMap) {\n        const $list = $('#spell-list');\n        const addedCombos = new Set();\n\n        for (const [combo, info] of Object.entries(spellMap)) {\n            // Avoid showing duplicates of same spell (some combos are symmetric)\n            const key = info.jutsu + info.emoji;\n            if (addedCombos.has(key)) continue;\n            addedCombos.add(key);\n\n            let label = info.label || `${info.emoji} ${info.spell}`;\n            label = info.gestures + ` ${label}`;\n            $list.append(`<li>${label}</li>`);\n        }\n    }\n\n\n}"],"names":["JutsuCaster","constructor","bp","options","this","showDots","init","appendScript","load","appendCSS","html","spellMap","gestures","spell","jutsu","type","emoji","label","console","log","fp","Gestures","Finger","FingerCurl","FingerDirection","GestureDescription","fistGesture","finger","all","addCurl","FullCurl","openPalmGesture","NoCurl","addDirection","VerticalUp","Index","DiagonalUpLeft","Pinky","DiagonalUpRight","pointUpGesture","Thumb","Middle","Ring","forEach","hangLooseGesture","HalfCurl","thumbsDownGesture","VerticalDown","DiagonalDownLeft","DiagonalDownRight","tightVictoryGesture","okayGesture","pointGesture","devilHornsGesture","GE","GestureEstimator","VictoryGesture","ThumbsUpGesture","gestureEmoji","victory","thumbs_up","fist_left","fist_right","point_up","open_palm","hang_loose","thumbs_down","tight_victory","okay","devil_horns","point_left","point_right","jutsuQueue","lastGestureTime","Date","now","hands","Hands","locateFile","file","open","window","discordView","win","focus","document","getElementById","onclick","$","content","toggle","renderSpellGuide","steps","stepIndex","$loadingText","interval","setInterval","text","length","clearInterval","call","startObjectDetection","maximize","alert","title","id","icon","x","y","width","height","minWidth","minHeight","parent","resizable","minimizable","maximizable","closable","focusable","maximized","minimized","onClose","video","srcObject","getTracks","track","stop","canvas","ctx","getContext","model","cocoSsd","stream","navigator","mediaDevices","getUserMedia","Promise","resolve","onloadeddata","play","style","display","holistic","Holistic","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","refineFaceLandmarks","minDetectionConfidence","minTrackingConfidence","selfieMode","maxNumHands","previousGestures","lastGestureTimePerHand","foundFirstHandGesture","startTime","setTimeout","hide","onResults","async","results","gestureTrailEl","gestureSpellEl","multiHandLandmarks","allGestures","innerHTML","i","landmarks","map","p","z","est","estimate","handLabel","multiHandedness","name","reduce","c","score","lastName","lastTime","push","span","createElement","textContent","marginRight","prepend","children","removeChild","lastChild","slice","handleJutsuCast","firstResults","fadeOut","flexShow","clearRect","drawImage","image","poseLandmarks","lm","beginPath","arc","Math","PI","fillStyle","fill","faceLandmarks","leftHandLandmarks","rightHandLandmarks","lw","rw","ls","rs","Camera","onFrame","videoWidth","videoHeight","send","predictions","detect","listEl","pred","bbox","rect","lineWidth","strokeStyle","stroke","fillText","class","li","toFixed","appendChild","start","key","join","spellMeta","charAt","toUpperCase","importModule","default","error","$list","addedCombos","Set","combo","info","Object","entries","has","add","append"],"mappings":"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"}