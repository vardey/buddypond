{"version":3,"file":"chess.js","sources":["../../../apps/based/chess/chess.js"],"sourcesContent":["// TODO: separate game logic using separate files\nexport default class ChessApp {\n    constructor(bp, options = {}) {\n        this.bp = bp;\n        this.options = options;\n        this.board = null;\n        this.game = null;\n        this.ws = null;\n        this.playerColor = null;\n        this.stockfish = null;\n        this.difficulty = 10; // Default difficulty (0-20 scale)\n\n        this.mode = 'multiplayer';\n    }\n\n    async init() {\n        this.html = await this.bp.load('/v5/apps/based/chess/chess.html');\n        await this.bp.appendCSS('/v5/apps/based/chess/chess.css');\n        await this.bp.appendScript('/v5/apps/based/chess/vendor/chessboardjs-1.0.0/js/chessboard-1.0.0.js');\n        await this.bp.appendScript('/v5/apps/based/chess/vendor/chess.js');\n        await this.bp.appendCSS('/v5/apps/based/chess/vendor/chessboardjs-1.0.0/css/chessboard-1.0.0.min.css', false, true);\n        return 'loaded ChessApp';\n    }\n\n    async open(config = {}) {\n\n        if (this.win) {\n            return this.win;\n        }\n        this.win = await this.bp.window(this.window());\n        // this.win = this.bp.apps.ui.windowManager.createWindow(this.window());\n        console.log('Opening ChessApp window:', this.win);\n        this.bindUI();\n\n        // Add difficulty slider to the DOM\n        this.setupDifficultySlider();\n\n        if (config.gameId) {\n            // join and start the game\n            this.gameId = config.gameId;\n            this.joinGame(config.gameId);\n            let parts = this.gameId.split('/');\n            console.log('Parts:', parts);\n            this.opponent = parts[0];\n            if (this.opponent === this.bp.me) {\n                this.opponent = parts[1];\n            }\n        }\n\n        //alert(this.win)\n        return this.win;\n    }\n\n    window() {\n        return {\n            id: 'chess',\n            title: 'BuddyPond Chess',\n            icon: 'desktop/assets/images/icons/icon_chess_64.png',\n            x: 120,\n            y: 80,\n            parent: $('#desktop')[0],\n            width: 850,\n            height: 600,\n            content: this.html,\n            resizable: true,\n            closable: true,\n            onClose: () => {\n                this.cleanup();\n                this.win = null;\n            },\n            onResize: () => {\n                if (this.board) {\n                    this.board.resize();\n                }\n            }\n        }\n    }\n\n    bindUI() {\n        const $mode = $('.chess-app-mode-selection');\n        const $join = $('.chess-app-join-ui');\n        const $game = $('.chess-app-game-ui');\n\n        // Handle \"Play Against Computer\"\n        $('#play-stockfish').on('click', () => {\n            this.mode = 'stockfish';\n            $mode.hide();\n            $game.show();\n            $('#opponent-name').text('Opponent: Stockfish');\n            this.startStockfishGame();\n        });\n\n        // Handle \"Play with a Buddy\" â†’ Show input\n        $('#show-join-game').on('click', () => {\n            if (!this.bp.me || this.bp.me === 'Guest') {\n                alert('Please log in to play with a buddy. ' + this.bp.me);\n                this.bp.open('buddylist');\n                return;\n            }\n\n            $mode.hide();\n            $join.show();\n        });\n\n        // Handle \"Join Game\" after buddy enters ID\n        $('#join-game').on('click', async () => {\n\n            // get the chess-game-buddyname value\n            let buddyname = $('#chess-game-buddyname').val().trim();\n            if (!buddyname) {\n                alert('Please enter a Buddy Name');\n                return;\n            }\n            let me = this.bp.me;\n\n            if (buddyname === me) {\n                alert('You cannot play against yourself. Please enter a different Buddy Name.');\n                return;\n            }\n            // combine buddyname and me into string separated by /, sorted alphabetically\n            let gameId = [buddyname, me].sort().join('/');\n            console.log('Game ID: ' + gameId);\n            // if (!gameId) return alert('Please enter a Game ID');\n            this.opponent = buddyname;\n            $('#game-input').val(gameId);\n            this.mode = 'multiplayer';\n            $join.hide();\n            $game.show();\n            // $('#opponent-name').text(`Waiting for ${buddyname} to connect`);\n            this.setStatus(`Waiting for ${buddyname} to connect`);\n            // alert('send')\n\n            console.log('gameId', gameId)\n            // if (data.chatId === 'buddy/' + gameId) {\n            // should send message to buddy that will open the videocall window on receiving end\n            this.sendGameInvite(buddyname);\n            this.joinGame(document.getElementById('game-input').value.trim());\n\n        });\n\n        // Leave Game\n        $('#leave-button').on('click', () => {\n            this.cleanup();\n            this.resetUI();\n        });\n\n        // Resign Game\n        $('#resign-button').on('click', () => {\n            if (this.mode === 'multiplayer') {\n                this.ws?.send(JSON.stringify({ type: 'resign' }));\n            }\n            this.setStatus('You resigned the game.');\n            this.gameHeader('Resigned');\n        });\n\n        // Restart Game (single-player only)\n        $('#restart-button').on('click', () => {\n            if (this.mode === 'stockfish') {\n                this.startStockfishGame();\n            }\n        });\n\n\n        // Init game logic + board\n        this.game = new Chess();\n\n        //$('#chessboard', this.win.content)[0]\n\n        const board = $('#chessboard', this.win.content);\n        this.board = Chessboard(board, {\n            pieceTheme: '/v5/apps/based/chess/img/chesspieces/wikipedia/{piece}.png',\n            draggable: true,\n            position: 'start',\n            onDragStart: this.onDragStart.bind(this),\n            onDrop: this.onDrop.bind(this),\n            onSnapEnd: this.onSnapEnd.bind(this)\n        });\n        // this.board.resize();\n        // get the width of the board container\n        const boardWidth = $('.chess-app-game-row', this.win.content).width();\n        //alert('Board width: ' + boardWidth);\n        // set the board size to be 90% of the container width\n        // board.css({ width: `${Math.floor(boardWidth * 0.9)}px` });\n        if (this.bp.isMobile()) {\n            $('.chess-app-board', this.win.content).css({ width: 'calc(var(--vw) * 0.95)' });\n        } else {\n            // $('.chess-app-board', this.win.content).css({ height: 'calc(var(--vh) * 1)'});\n\n        }\n        this.board.resize();\n        // $('.chess-app-board', this.win.content).width(Math.floor(boardWidth * 0.9));\n\n        this.updateStatus();\n    }\n\n    sendGameInvite(buddyname) {\n\n        let message = {\n            from: bp.me,\n            to: buddyname,\n            text: 'Let\\'s play a chess game',\n            type: 'buddy',\n            card: {\n                type: 'chess'\n            }\n        }\n        console.log('Buddy Chess message', message);\n        // send message to buddy\n        buddypond.sendCardMessage(message, function (err, response) {\n            if (err) {\n                console.error('Error sending message', err);\n            } else {\n                console.log('Message sent', response);\n            }\n        });\n\n    }\n\n    setupDifficultySlider() {\n        const sliderContainer = document.createElement('div');\n        sliderContainer.className = 'chess-app-difficulty-slider';\n        sliderContainer.innerHTML = `\n      <label for=\"difficulty\">Difficulty: <span id=\"difficultyValue\">${this.difficulty}</span></label>\n      <input type=\"range\" id=\"difficulty\" min=\"0\" max=\"20\" value=\"${this.difficulty}\" step=\"1\">\n    `;\n        //document.body.appendChild(sliderContainer); // Adjust to append where needed\n        $('.chess-app-controls', this.win.content).append(sliderContainer);\n\n        const slider = document.getElementById('difficulty');\n        const difficultyValue = document.getElementById('difficultyValue');\n\n        slider.addEventListener('input', (e) => {\n            this.difficulty = parseInt(e.target.value, 10);\n            difficultyValue.textContent = this.difficulty;\n            // Update Stockfish difficulty if game is active\n            if (this.stockfish) {\n                this.setStockfishDifficulty();\n            }\n        });\n    }\n\n    // Set Stockfish difficulty by sending UCI commands\n    setStockfishDifficulty() {\n        // Map difficulty (0-20) to Stockfish Skill Level (0-20)\n        this.stockfish.postMessage(`setoption name Skill Level value ${this.difficulty}`);\n        // Optionally limit depth for lower difficulty to make Stockfish respond faster\n        const maxDepth = Math.max(1, Math.floor(this.difficulty / 2) + 1); // Depth 1-11\n        this.stockfish.postMessage(`setoption name Skill Level Maximum Depth value ${maxDepth}`);\n    }\n\n    startStockfishGame() {\n        $('.chess-app-difficulty-slider', this.win.content).show();\n        this.game.reset();\n        this.board.position('start');\n        this.playerColor = 'w';\n        this.setStatus('You are White. Make your move.');\n        this.stockfish = new Worker('v5/apps/based/chess/vendor/stockfish.min.js');\n        this.stockfish.onmessage = (e) => {\n            if (typeof e.data === 'string' && e.data.startsWith('bestmove')) {\n                const move = e.data.split(' ')[1];\n                const from = move.substring(0, 2);\n                const to = move.substring(2, 4);\n                const result = this.game.move({ from, to, promotion: 'q' });\n                this.bp.play('v5/apps/based/chess/vendor/sound/standard/Move.mp3');\n\n                if (result) {\n                    if (result.captured) {\n                        this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Capture.mp3');\n                    } else if (this.game.in_check()) {\n                        this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Check.mp3');\n                    } else if (this.game.in_checkmate()) {\n                        this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Victory.mp3');\n                    } else {\n                        this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Move.mp3');\n                    }\n                    this.board.position(this.game.fen());\n                    this.updateStatus();\n                }\n            }\n        };\n\n        // Initialize Stockfish with UCI commands\n        this.stockfish.postMessage('uci');\n        this.stockfish.postMessage('isready');\n        this.setStockfishDifficulty(); // Set initial difficulty\n\n    }\n\n    async joinGame(gameId) {\n        if (!gameId) return alert('Please enter a game ID');\n        const $mode = $('.chess-app-mode-selection');\n        const $join = $('.chess-app-join-ui');\n        const $game = $('.chess-app-game-ui');\n\n        // hide the `restart-button` button\n        this.mode = 'multiplayer';\n        $join.hide();\n        $game.show();\n        $mode.hide();\n\n        $('#restart-button', this.win.content).hide();\n        $('.chess-app-difficulty-slider', this.win.content).hide();\n\n        const endpoint = `${buddypond.chessWsEndpoint}?me=${buddypond.me}&qtokenid=${buddypond.qtokenid}gameId=${encodeURIComponent(gameId)}`;\n        console.log('Connecting to game server at:', endpoint);\n        this.ws = new WebSocket(endpoint);\n\n        this.ws.onopen = () => {\n            //alert('Connected to game server');\n            this.ws.send(JSON.stringify({ type: 'join', gameId }));\n            this.ws.send(JSON.stringify({ type: 'getState' }));\n            this.setStatus('Connected! Waiting for opponent...');\n        };\n\n        this.ws.onmessage = (event) => this.handleSocketMessage(event);\n        this.ws.onclose = () => this.setStatus('Disconnected from game');\n        this.ws.onerror = () => this.setStatus('WebSocket error occurred');\n    }\n\n    async resignGame() {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify({ type: 'resign' }));\n            this.setStatus('You resigned the game.');\n            this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Defeat.mp3'); // Play resignation sound\n        } else {\n            this.setStatus('Cannot resign, not connected to a game.');\n            this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Error.mp3'); // Play error sound\n\n        }\n    }\n\n    handleSocketMessage(event) {\n        const data = JSON.parse(event.data);\n        console.log('handleSocketMessage', event.data)\n        switch (data.type) {\n            case 'color':\n                this.playerColor = data.color;\n                this.board.orientation(this.playerColor === 'w' ? 'white' : 'black');\n                this.setStatus(\n                    `You are ${this.playerColor === 'w' ? 'White' : 'Black'}. ` +\n                    `${this.game.turn() === 'w' ? 'White' : 'Black'} to move.`\n                );\n                break;\n\n            case 'gameStart':\n                this.gameConnected = true;\n                this.setStatus('Game started! ' + (this.playerColor === this.game.turn() ? 'Your move' : this.opponent + \"'s move\"));\n                this.bp.play('/v5/apps/based/chess/vendor/sound/standard/GenericNotify.mp3'); // Play game start sound\n                break;\n\n            case 'gameState':\n                this.game.load(data.fen);\n                this.board.position(this.game.fen());\n                this.updateStatus();\n                break;\n\n            case 'move':\n                const move = this.game.move(data.move);\n                if (move) {\n                    // Play sound based on opponent move type\n                    if (move.captured) {\n                        this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Capture.mp3');\n                    } else if (this.game.in_check()) {\n                        this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Check.mp3');\n                    } else {\n                        this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Move.mp3');\n                    }\n                    this.board.position(this.game.fen());\n                    this.updateStatus();\n                }\n                break;\n\n            case 'gameReset':\n                this.game.reset();\n                this.board.start();\n                this.gameConnected = true;\n                // this.playerColor = null;\n                this.setStatus('Game started! ' + (this.playerColor === this.game.turn() ? 'Your move' : \"Opponent's move\"));\n                $('#rematch-button', this.win.content).hide();\n                this.bp.play('/v5/apps/based/chess/vendor/sound/standard/GenericNotify.mp3'); // Play game reset sound\n\n                break;\n\n            case 'gameOver':\n                this.setStatus('Game Over: ' + data.result);\n\n\n                if (data.result.includes('checkmate')) {\n                    this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Victory.mp3');\n                } else if (data.result.includes('draw')) {\n                    this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Draw.mp3');\n                } else if (data.result.includes('resigned')) {\n                    this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Victory.mp3');\n                }\n\n\n                // show the rematch button if multiplayer\n                if (this.mode === 'multiplayer') {\n                    $('#rematch-button', this.win.content).show();\n                    $('#rematch-button', this.win.content).on('click', () => {\n                        this.ws.send(JSON.stringify({ type: 'rematch' }));\n                        this.setStatus(`Rematch requested. Waiting for ${this.opponent}...`);\n                    });\n                }\n                break;\n\n            case 'error':\n                this.setStatus('Error: ' + data.message);\n                this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Error.mp3'); // Play error sound\n\n                break;\n            case 'disconnect':\n                this.gameConnected = false;\n                this.setStatus(this.opponent + ' has disconnected...');\n                this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Error.mp3'); // Play disconnect sound\n\n                break;\n\n            default:\n                console.warn('Unknown socket message:', data);\n                break;\n        }\n    }\n\n    onDragStart(source, piece) {\n        if (this.game.game_over()) return false;\n        if (this.mode === 'multiplayer') {\n            if (this.playerColor && piece[0] !== this.playerColor) return false;\n            if (this.game.turn() !== this.playerColor) return false;\n        } else if (this.mode === 'stockfish') {\n            if (this.game.turn() !== 'w') return false;\n        }\n        return true;\n    }\n\n    onDrop(source, target) {\n        let move;\n        try {\n            move = this.game.move({ from: source, to: target, promotion: 'q' });\n\n            if (move) {\n                if (move.captured) {\n                    this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Capture.mp3');\n                } else if (this.game.in_check()) {\n                    this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Check.mp3');\n                } else {\n                    this.bp.play('/v5/apps/based/chess/vendor/sound/standard/Move.mp3');\n                }\n            } else {\n                return 'snapback';\n            }\n\n\n        } catch (err) {\n            return 'snapback';\n        }\n\n        if (this.mode === 'multiplayer' && this.ws?.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify({\n                type: 'move',\n                gameId: document.getElementById('game-input').value,\n                move: { from: source, to: target, promotion: 'q' }\n            }));\n        } else if (this.mode === 'stockfish') {\n            setTimeout(() => {\n                this.stockfish.postMessage('position fen ' + this.game.fen());\n                this.stockfish.postMessage('go depth 15');\n            }, 200);\n        }\n\n        this.updateStatus();\n    }\n\n    onSnapEnd() {\n        this.board.position(this.game.fen());\n    }\n\n    // TODO: remove game logic checks from here, should only update the status text\n    updateStatus() {\n        let status = '';\n        if (this.game.in_checkmate()) {\n            status = 'Checkmate! ' + (this.game.turn() === 'w' ? 'Black' : 'White') + ' wins!';\n        } else if (this.game.in_draw()) {\n            status = 'Game Over: Draw!';\n        } else {\n            if (this.mode !== 'stockfish') {\n                if (this.gameConnected) {\n                    status = (this.game.turn() === 'w' ? 'White' : 'Black') + ' to move';\n                } else {\n                    status = `Waiting for ${this.opponent} to connect...`;\n                }\n            } else {\n                status = (this.game.turn() === 'w' ? 'White' : 'Black') + ' to move';\n            }\n        }\n        this.setStatus(status);\n    }\n\n    setStatus(message) {\n        $('.chess-app-status', this.win.content).text(message);\n        // document.getElementById('status').textContent = message;\n    }\n\n    resetUI() {\n        $('.chess-app-mode-selection', this.win.content).show();\n        $('.chess-app-join-ui', this.win.content).hide();\n        $('.chess-app-game-ui', this.win.content).hide();\n        $('#opponent-name', this.win.content).text('Opponent: ');\n        $('#rematch-button', this.win.content).hide();\n        this.setStatus('Welcome to BuddyPond Chess!');\n        if (this.board) {\n            this.board.clear();\n            this.board.start();\n        }\n        this.game = new Chess();\n        this.playerColor = null;\n        if (this.stockfish) {\n            this.stockfish.terminate();\n            this.stockfish = null;\n        }\n        if (this.ws) {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n\n    cleanup() {\n        if (this.ws) this.ws.close();\n        if (this.stockfish) {\n            this.stockfish.terminate();\n            this.stockfish = null;\n        }\n    }\n}"],"names":["ChessApp","constructor","bp","options","this","board","game","ws","playerColor","stockfish","difficulty","mode","init","html","load","appendCSS","appendScript","open","config","win","window","console","log","bindUI","setupDifficultySlider","gameId","joinGame","parts","split","opponent","me","id","title","icon","x","y","parent","$","width","height","content","resizable","closable","onClose","cleanup","onResize","resize","$mode","$join","$game","on","hide","show","text","startStockfishGame","alert","async","buddyname","val","trim","sort","join","setStatus","sendGameInvite","document","getElementById","value","resetUI","send","JSON","stringify","type","gameHeader","Chess","Chessboard","pieceTheme","draggable","position","onDragStart","bind","onDrop","onSnapEnd","isMobile","css","updateStatus","message","from","to","card","buddypond","sendCardMessage","err","response","error","sliderContainer","createElement","className","innerHTML","append","slider","difficultyValue","addEventListener","e","parseInt","target","textContent","setStockfishDifficulty","postMessage","maxDepth","Math","max","floor","reset","Worker","onmessage","data","startsWith","move","substring","result","promotion","play","captured","in_check","in_checkmate","fen","endpoint","chessWsEndpoint","qtokenid","encodeURIComponent","WebSocket","onopen","event","handleSocketMessage","onclose","onerror","resignGame","readyState","OPEN","parse","color","orientation","turn","gameConnected","start","includes","warn","source","piece","game_over","setTimeout","status","in_draw","clear","terminate","close"],"mappings":"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"}